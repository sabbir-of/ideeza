LavaPack.loadBundle([[88,{"../../../../shared/constants/app":4067,"../../../../shared/constants/gas":4072,"../../../../shared/constants/metametrics":4077,"../../../../shared/constants/transaction":4090,"../../../../shared/lib/transactions-controller-utils":4099,"../../../../shared/modules/conversion.utils":4105,"../../../../shared/modules/transaction.utils":4121,"../../../../ui/helpers/utils/metrics":4946,"../snap-keyring/metrics":84,"@metamask/eth-query":1149,"@metamask/transaction-controller":1753,"bignumber.js":2364,"ethereumjs-util":2834},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.handleTransactionSubmitted=r.handleTransactionRejected=r.handleTransactionFailed=r.handleTransactionDropped=r.handleTransactionConfirmed=r.handleTransactionApproved=r.handleTransactionAdded=r.handlePostTransactionBalanceUpdate=r.createTransactionEventFragmentWithTxId=r.METRICS_STATUS_FAILED=void 0;var n,o=e("ethereumjs-util"),s=(n=e("@metamask/eth-query"))&&n.__esModule?n:{default:n},i=e("bignumber.js"),a=e("@metamask/transaction-controller"),l=e("../../../../shared/constants/app"),c=e("../../../../shared/modules/transaction.utils"),d=e("../../../../shared/modules/conversion.utils"),u=e("../../../../shared/constants/transaction"),p=e("../../../../shared/constants/metametrics"),h=e("../../../../shared/constants/gas"),g=e("../../../../shared/lib/transactions-controller-utils"),C=e("../../../../ui/helpers/utils/metrics"),m=e("../snap-keyring/metrics");const f=r.METRICS_STATUS_FAILED="failed on-chain";r.handleTransactionAdded=async(e,t)=>{if(!t.transactionMeta)return;const{properties:r,sensitiveProperties:n}=await w({transactionEventPayload:t,transactionMetricsRequest:e});v({eventName:u.TransactionMetaMetricsEvent.added,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:r,sensitiveProperties:n}})};r.handleTransactionApproved=async(e,t)=>{t.transactionMeta&&await k({eventName:u.TransactionMetaMetricsEvent.approved,transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionFailed=async(e,t)=>{if(!t.transactionMeta)return;const r={};t.error&&(r.error=t.error),await k({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:r,transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionConfirmed=async(e,t)=>{if(!t.transactionMeta)return;const r={},{transactionMeta:n}=t,{txReceipt:o}=n;r.gas_used=null==o?void 0:o.gasUsed;const{submittedTime:s}=n;s&&(r.completion_time=function(e){return Math.round((Date.now()-e)/1e3).toString()}(s)),"0x0"===(null==o?void 0:o.status)&&(r.status=f),await k({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:r,transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionDropped=async(e,t)=>{if(!t.transactionMeta)return;await k({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:{dropped:!0},transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionRejected=async(e,t)=>{t.transactionMeta&&await k({eventName:u.TransactionMetaMetricsEvent.rejected,transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionSubmitted=async(e,t)=>{if(!t.transactionMeta)return;const{properties:r,sensitiveProperties:n}=await w({transactionEventPayload:t,transactionMetricsRequest:e});v({eventName:u.TransactionMetaMetricsEvent.submitted,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:r,sensitiveProperties:n}})};r.createTransactionEventFragmentWithTxId=async(e,{transactionId:t,actionId:r})=>{const n=e.getTransaction(t);n.actionId=r;const{properties:o,sensitiveProperties:s}=await w({transactionEventPayload:{transactionMeta:n},transactionMetricsRequest:e});v({eventName:u.TransactionMetaMetricsEvent.approved,transactionEventPayload:{actionId:n.actionId,transactionMeta:n},transactionMetricsRequest:e,payload:{properties:o,sensitiveProperties:s}})};function v({eventName:e,transactionEventPayload:{transactionMeta:t,actionId:r},transactionMetricsRequest:n,payload:o}){if(function(e,t,r){const n=b(t,r.id);return void 0!==e(n)}(n.getEventFragmentById,e,t))return;const s=b(e,t.id);switch(e){case u.TransactionMetaMetricsEvent.added:n.createEventFragment({category:p.MetaMetricsEventCategory.Transactions,initialEvent:u.TransactionMetaMetricsEvent.added,successEvent:u.TransactionMetaMetricsEvent.approved,failureEvent:u.TransactionMetaMetricsEvent.rejected,properties:o.properties,sensitiveProperties:o.sensitiveProperties,actionId:r,uniqueIdentifier:s,persist:!0});break;case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.rejected:n.createEventFragment({category:p.MetaMetricsEventCategory.Transactions,successEvent:u.TransactionMetaMetricsEvent.approved,failureEvent:u.TransactionMetaMetricsEvent.rejected,properties:o.properties,sensitiveProperties:o.sensitiveProperties,actionId:r,uniqueIdentifier:s,persist:!0});break;case u.TransactionMetaMetricsEvent.submitted:n.createEventFragment({category:p.MetaMetricsEventCategory.Transactions,initialEvent:u.TransactionMetaMetricsEvent.submitted,successEvent:u.TransactionMetaMetricsEvent.finalized,properties:o.properties,sensitiveProperties:o.sensitiveProperties,actionId:r,uniqueIdentifier:s,persist:!0});break;case u.TransactionMetaMetricsEvent.finalized:n.createEventFragment({category:p.MetaMetricsEventCategory.Transactions,successEvent:u.TransactionMetaMetricsEvent.finalized,properties:o.properties,sensitiveProperties:o.sensitiveProperties,actionId:r,uniqueIdentifier:s,persist:!0})}}async function k({eventName:e,transactionEventPayload:t,transactionMetricsRequest:r,extraParams:n={}}){const{properties:o,sensitiveProperties:s}=await w({transactionEventPayload:t,transactionMetricsRequest:r,extraParams:n});v({eventName:e,transactionEventPayload:t,transactionMetricsRequest:r,payload:{properties:o,sensitiveProperties:s}}),function({eventName:e,transactionEventPayload:{transactionMeta:t},transactionMetricsRequest:r,payload:n}){const o=b(e,t.id);switch(e){case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.rejected:case u.TransactionMetaMetricsEvent.finalized:r.updateEventFragment(o,{properties:n.properties,sensitiveProperties:n.sensitiveProperties})}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:r,payload:{properties:o,sensitiveProperties:s}}),function({eventName:e,transactionMetricsRequest:t,transactionEventPayload:{transactionMeta:r}}){const n=b(e,r.id);switch(e){case u.TransactionMetaMetricsEvent.approved:t.finalizeEventFragment(n);break;case u.TransactionMetaMetricsEvent.rejected:t.finalizeEventFragment(n,{abandoned:!0});break;case u.TransactionMetaMetricsEvent.finalized:t.finalizeEventFragment(n)}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:r})}function b(e,t){return`transaction-${[u.TransactionMetaMetricsEvent.finalized,u.TransactionMetaMetricsEvent.submitted].includes(e)?"submitted":"added"}-${t}`}async function w({transactionEventPayload:{transactionMeta:e},transactionMetricsRequest:t,extraParams:r={}}){var n;const{type:f,time:v,status:k,chainId:b,origin:w,txParams:{gasPrice:y,gas:S,maxFeePerGas:T,maxPriorityFeePerGas:M,estimateSuggested:A,estimateUsed:E},defaultGasEstimates:P,originalType:N,replacedById:R,customTokenAmount:I,dappProposedTokenAmount:_,currentTokenBalance:O,originalApprovalAmount:F,finalApprovalAmount:x,contractMethodName:D,securityProviderResponse:L,simulationFails:U}=e,B=new s.default(t.provider),j=w===l.ORIGIN_METAMASK?"user":"dapp",{assetType:q,tokenStandard:K}=await(0,c.determineTransactionAssetType)(e,B,t.getTokenStandardAndDetails),G={};if((0,c.isEIP1559Transaction)(e)?(G.max_fee_per_gas=T,G.max_priority_fee_per_gas=M):G.gas_price=y,P){var $,V;const{estimateType:r}=P;if(r){var H,W;G.default_estimate=r;let n=null===(H=e.defaultGasEstimates)||void 0===H?void 0:H.maxFeePerGas,o=null===(W=e.defaultGasEstimates)||void 0===W?void 0:W.maxPriorityFeePerGas;if([h.GasRecommendations.low,h.GasRecommendations.medium,h.GasRecommendations.high].includes(r)){var z,Q;const{gasFeeEstimates:e}=await t.getEIP1559GasFeeEstimates();var Y,J;if(null!=e&&null!==(z=e[r])&&void 0!==z&&z.suggestedMaxFeePerGas)n=null===(Y=e[r])||void 0===Y?void 0:Y.suggestedMaxFeePerGas,G.default_max_fee_per_gas=n;if(null!=e&&null!==(Q=e[r])&&void 0!==Q&&Q.suggestedMaxPriorityFeePerGas)o=null===(J=e[r])||void 0===J?void 0:J.suggestedMaxPriorityFeePerGas,G.default_max_priority_fee_per_gas=o}}null!==($=e.defaultGasEstimates)&&void 0!==$&&$.gas&&(G.default_gas=e.defaultGasEstimates.gas),null!==(V=e.defaultGasEstimates)&&void 0!==V&&V.gasPrice&&(G.default_gas_price=e.defaultGasEstimates.gasPrice)}A&&(G.estimate_suggested=A),E&&(G.estimate_used=E),null!=r&&r.gas_used&&(G.gas_used=r.gas_used);const X=function(e){const t={};for(const r in e)(0,o.isHexString)(e[r])?t[r]=(0,d.hexWEIToDecGWEI)(e[r]):t[r]=e[r];return t}(G);let Z="0";e.txParams.maxFeePerGas&&(Z="2");const ee=f&&[a.TransactionType.contractInteraction,a.TransactionType.tokenMethodApprove,a.TransactionType.tokenMethodSafeTransferFrom,a.TransactionType.tokenMethodSetApprovalForAll,a.TransactionType.tokenMethodTransfer,a.TransactionType.tokenMethodTransferFrom,a.TransactionType.smart,a.TransactionType.swap,a.TransactionType.swapApproval].includes(f),te="Approve";let re,ne,oe,se,ie=a.TransactionType.simpleSend;f===a.TransactionType.cancel?ie=a.TransactionType.cancel:f===a.TransactionType.retry&&N?ie=N:f===a.TransactionType.deployContract?ie=a.TransactionType.deployContract:ee&&(ie=a.TransactionType.contractInteraction,ne=D,ne===te&&K===u.TokenStandard.ERC20&&("0"===_||"0"===I?re=u.TransactionApprovalAmountType.revoke:I&&I!==_?re=u.TransactionApprovalAmountType.custom:_&&(re=u.TransactionApprovalAmountType.dappProposed),oe=function(e,t,r){if(e===u.TransactionApprovalAmountType.custom&&t&&r)return`${new i.BigNumber(t,10).div(r,10).times(100).round(2)}`;return null}(re,F,x),se=function(e,t,r){if((e===u.TransactionApprovalAmountType.custom||e===u.TransactionApprovalAmountType.dappProposed)&&t&&r)return`${new i.BigNumber(t,16).div(r,10).times(100).round(2)}`;return null}(re,_,O)));const ae=t.getTransaction(R),le={RETRY:a.TransactionType.retry,CANCEL:a.TransactionType.cancel,SAME_NONCE:"other"};let ce;null!=r&&r.dropped&&(ce=le.SAME_NONCE,(null==ae?void 0:ae.type)===a.TransactionType.cancel?ce=le.CANCEL:(null==ae?void 0:ae.type)===a.TransactionType.retry&&(ce=le.RETRY));const de=[];1===(null==L?void 0:L.flagAsDangerous)?de.push(p.MetaMetricsEventUiCustomization.FlaggedAsMalicious):2===(null==L?void 0:L.flagAsDangerous)&&de.push(p.MetaMetricsEventUiCustomization.FlaggedAsSafetyUnknown);const ue=(0,C.getBlockaidMetricsProps)(e);(null==ue||null===(n=ue.ui_customizations)||void 0===n?void 0:n.length)>0&&de.push(...ue.ui_customizations),U&&de.push(p.MetaMetricsEventUiCustomization.GasEstimationFailed);let pe={chain_id:b,referrer:w,source:j,status:k,network:`${parseInt(b,16)}`,eip_1559_version:Z,gas_edit_type:"none",gas_edit_attempted:"none",gas_estimation_failed:Boolean(U),account_type:await t.getAccountType(t.getSelectedAddress()),device_model:await t.getDeviceModel(t.getSelectedAddress()),asset_type:q,token_standard:K,transaction_type:ie,transaction_speed_up:f===a.TransactionType.retry,...ue,ui_customizations:de.length>0?de:null};const he=await(0,m.getSnapAndHardwareInfoForMetrics)(t.getAccountType,t.getDeviceModel,t.snapAndHardwareMessenger);Object.assign(pe,he),ne===te&&(pe={...pe,transaction_approval_amount_type:re});let ge={transaction_envelope_type:(0,c.isEIP1559Transaction)(e)?g.TRANSACTION_ENVELOPE_TYPE_NAMES.FEE_MARKET:g.TRANSACTION_ENVELOPE_TYPE_NAMES.LEGACY,first_seen:v,gas_limit:S,transaction_contract_method:ne,transaction_replaced:ce,...r,...X};return ne===te&&(ge={...ge,transaction_approval_amount_vs_balance_ratio:se,transaction_approval_amount_vs_proposed_ratio:oe}),{properties:pe,sensitiveProperties:ge}}r.handlePostTransactionBalanceUpdate=async({getParticipateInMetrics:e,trackEvent:t},{transactionMeta:r,approvalTransactionMeta:n})=>{var o;if(e()&&r.swapMetaData)if("0x0"===(null===(o=r.txReceipt)||void 0===o?void 0:o.status))t({event:"Swap Failed",sensitiveProperties:{...r.swapMetaData},category:p.MetaMetricsEventCategory.Swaps});else{var s;const e=(0,g.getSwapsTokensReceivedFromTxMeta)(r.destinationTokenSymbol,r,r.destinationTokenAddress,r.txParams.from,r.destinationTokenDecimals,n,r.chainId),o=e?`${new i.BigNumber(e,10).div(r.swapMetaData.token_to_amount,10).times(100).round(2)}%`:null,a=null!==(s=r.txReceipt)&&void 0!==s&&s.gasUsed&&r.swapMetaData.estimated_gas?`${new i.BigNumber(r.txReceipt.gasUsed,16).div(r.swapMetaData.estimated_gas,10).times(100).round(2)}%`:null,l=function(e,t){var r,n;let o="0x0";null!=t&&t.txReceipt&&(o=(0,g.calcGasTotal)(t.txReceipt.gasUsed,t.txReceipt.effectiveGasPrice));const s=(0,g.calcGasTotal)(null===(r=e.txReceipt)||void 0===r?void 0:r.gasUsed,null===(n=e.txReceipt)||void 0===n?void 0:n.effectiveGasPrice),a=new i.BigNumber(s,16).plus(o,16).toString(16);return{approvalGasCostInEth:Number((0,d.hexWEIToDecETH)(o)),tradeGasCostInEth:Number((0,d.hexWEIToDecETH)(s)),tradeAndApprovalGasCostInEth:Number((0,d.hexWEIToDecETH)(a))}}(r,n);t({event:p.MetaMetricsEventName.SwapCompleted,category:p.MetaMetricsEventCategory.Swaps,sensitiveProperties:{...r.swapMetaData,token_to_amount_received:e,quote_vs_executionRatio:o,estimated_vs_used_gasRatio:a,approval_gas_cost_in_eth:l.approvalGasCostInEth,trade_gas_cost_in_eth:l.tradeGasCostInEth,trade_and_approval_gas_cost_in_eth:l.tradeAndApprovalGasCostInEth,token_to_amount:r.swapMetaData.token_to_amount.toString(10)}})}}}}},{package:"$root$",file:"app/scripts/lib/transaction/metrics.ts"}],[89,{"../../../../shared/constants/security-provider":4082,"../ppom/ppom-middleware":64,"@metamask/transaction-controller":1753,"@sentry/browser":1878,"ethereumjs-util":2834,uuid:4014},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.addDappTransaction=async function(e){const{dappRequest:t}=e,{id:r,method:n,origin:o}=t,{securityAlertResponse:s}=t,i={actionId:r,method:n,origin:o,requireApproval:!0,securityAlertResponse:s},{waitForHash:a}=await d({...e,transactionOptions:i});return await a()},r.addTransaction=async function(e,t){const{transactionParams:r,transactionOptions:n,ppomController:s,securityAlertsEnabled:u,chainId:p}=e,h=n.type&&c.includes(n.type);if(u&&a.SUPPORTED_CHAIN_IDS.includes(p)&&!h)try{const a={method:"eth_sendTransaction",id:"actionId"in n?n.actionId:"",origin:"origin"in n?n.origin:"",params:[{from:r.from,to:r.to,value:r.value,data:r.data}]},c=(0,i.v4)();s.usePPOM((async e=>{try{return await e.validateJsonRpc(a)}catch(e){(0,o.captureException)(e),console.error("Error validating JSON RPC using PPOM: ",e);return{securityAlertId:c,result_type:l.BlockaidResultType.Failed,reason:l.BlockaidReason.failed,description:"Validating the confirmation failed by throwing error."}}})).then((r=>{t(e.transactionOptions,{...r,securityAlertId:c})})),e.transactionOptions.securityAlertResponse={reason:l.BlockaidResultType.Loading,result_type:l.BlockaidReason.inProgress,securityAlertId:c}}catch(e){(0,o.captureException)(e)}const{transactionMeta:g,waitForHash:C}=await d(e);if(!e.waitForSubmit)return C().catch((()=>{})),g;const m=await C();return function(e,t){return t.state.transactions.find((t=>t.hash===e))}(m,e.transactionController)};var n=e("@metamask/transaction-controller"),o=e("@sentry/browser"),s=e("ethereumjs-util"),i=e("uuid"),a=e("../ppom/ppom-middleware"),l=e("../../../../shared/constants/security-provider");const c=[n.TransactionType.swap,n.TransactionType.swapApproval];async function d(e){const{selectedAccount:t}=e;return"eip155:erc4337"===t.type?async function(e){var t;const{networkClientId:r,transactionController:n,transactionOptions:o,transactionParams:i,userOperationController:a}=e,{maxFeePerGas:l,maxPriorityFeePerGas:c}=i,{origin:d,requireApproval:p,type:h}=o,g={...i,maxFeePerGas:(0,s.addHexPrefix)(l),maxPriorityFeePerGas:(0,s.addHexPrefix)(c)},C=null==o||null===(t=o.swaps)||void 0===t?void 0:t.meta;null!=C&&C.type&&delete C.type;const m={networkClientId:r,origin:d,requireApproval:p,swaps:C,type:h},f=await a.addUserOperationFromTransaction(g,m);a.startPollingByNetworkClientId(r);return{transactionMeta:u(f.id,n),waitForHash:f.transactionHash}}(e):async function(e){const{transactionController:t,transactionOptions:r,transactionParams:n}=e,{result:o,transactionMeta:s}=await t.addTransaction(n,r);return{transactionMeta:s,waitForHash:()=>o}}(e)}function u(e,t){return t.state.transactions.find((t=>t.id===e))}}}},{package:"$root$",file:"app/scripts/lib/transaction/util.ts"}],[9,{"@metamask/obs-store":1424,events:2875},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,o=(n=e("events"))&&n.__esModule?n:{default:n},s=e("@metamask/obs-store");function i(e,t){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.add(e)}function a(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(r!==undefined){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t,r){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return r}const c={currentAppVersion:"",previousAppVersion:"",previousMigrationVersion:0,currentMigrationVersion:0};var d=new WeakSet,u=new WeakSet;class p extends o.default{constructor({currentAppVersion:e="",currentMigrationVersion:t=0,state:r={}}){super(),i(this,u),i(this,d),a(this,"store",void 0),this.store=new s.ObservableStore({...c,...r}),l(this,d,h).call(this,e),l(this,u,g).call(this,t)}}function h(e){const t=this.store.getState().currentAppVersion;e!==t&&this.store.updateState({currentAppVersion:e,previousAppVersion:t})}function g(e){const t=this.store.getState().currentMigrationVersion;e!==t&&this.store.updateState({previousMigrationVersion:t,currentMigrationVersion:e})}r.default=p}}},{package:"$root$",file:"app/scripts/controllers/app-metadata.ts"}],[91,{"../../shared/constants/app":4067,"../../shared/constants/hardware-wallets":4073,"../../shared/constants/keyring":4074,"../../shared/constants/logs":4076,"../../shared/constants/metametrics":4077,"../../shared/constants/network":4078,"../../shared/constants/permissions":4080,"../../shared/constants/swaps":4086,"../../shared/constants/time":4088,"../../shared/constants/tokens":4089,"../../shared/constants/transaction":4090,"../../shared/lib/metamask-controller-utils":4094,"../../shared/lib/token-util.ts":4098,"../../shared/modules/conversion.utils":4105,"../../shared/modules/mv3.utils":4112,"../../shared/modules/network.utils":4113,"../../shared/modules/string-utils":4119,"../../shared/modules/transaction.utils":4121,"../../shared/notifications":4123,"./controllers/account-order":7,"./controllers/alert":8,"./controllers/app-metadata":9,"./controllers/app-state":10,"./controllers/decrypt-message":11,"./controllers/detect-tokens":12,"./controllers/encryption-public-key":13,"./controllers/ens":15,"./controllers/metametrics":16,"./controllers/network-order":17,"./controllers/onboarding":18,"./controllers/permissions":22,"./controllers/preferences":26,"./controllers/swaps":27,"./detect-multiple-instances":28,"./lib/AddressBookPetnamesBridge":30,"./lib/ComposableObservableStore":31,"./lib/SnapsNameProvider":32,"./lib/account-tracker":33,"./lib/backup":34,"./lib/createDupeReqFilterMiddleware":35,"./lib/createLoggerMiddleware":36,"./lib/createMetaRPCHandler":37,"./lib/createMetamaskMiddleware":38,"./lib/createOnboardingMiddleware":39,"./lib/createOriginMiddleware":40,"./lib/createRPCMethodTrackingMiddleware":41,"./lib/createTabIdMiddleware":43,"./lib/encryptor-factory":44,"./lib/hardware-keyring-builder-factory":52,"./lib/keyring-snaps-permissions":53,"./lib/offscreen-bridge/lattice-offscreen-keyring":60,"./lib/offscreen-bridge/ledger-offscreen-bridge":61,"./lib/offscreen-bridge/trezor-offscreen-bridge":62,"./lib/ppom/indexed-db-backend":63,"./lib/ppom/ppom":65,"./lib/ppom/ppom-middleware":64,"./lib/rpc-method-middleware":76,"./lib/security-provider-helpers":77,"./lib/segment":79,"./lib/snap-keyring":83,"./lib/stream-utils":87,"./lib/transaction/metrics":88,"./lib/transaction/util":89,"./lib/util":90,"./translate":208,"@keystonehq/metamask-airgapped-keyring":555,"@metamask/accounts-controller":1009,"@metamask/address-book-controller":1012,"@metamask/announcement-controller":1042,"@metamask/approval-controller":1045,"@metamask/assets-controllers":1064,"@metamask/base-controller":1072,"@metamask/controller-utils":1077,"@metamask/desktop/dist/controllers/desktop":1087,"@metamask/eth-json-rpc-middleware":1128,"@metamask/eth-keyring-controller":1144,"@metamask/eth-ledger-bridge-keyring":1145,"@metamask/eth-query":1149,"@metamask/eth-trezor-keyring":1206,"@metamask/ethjs-query":1224,"@metamask/gas-fee-controller":1239,"@metamask/keyring-controller":1324,"@metamask/logging-controller":1330,"@metamask/name-controller":1361,"@metamask/network-controller":1373,"@metamask/notification-controller":1377,"@metamask/obs-store":1424,"@metamask/obs-store/dist/asStream":1423,"@metamask/permission-controller":1432,"@metamask/phishing-controller":1442,"@metamask/post-message-stream":1451,"@metamask/ppom-validator":1488,"@metamask/queued-request-controller":1498,"@metamask/rate-limit-controller":1500,"@metamask/scure-bip39/dist/wordlists/english":1512,"@metamask/selected-network-controller":1524,"@metamask/signature-controller":1526,"@metamask/smart-transactions-controller":1540,"@metamask/snaps-controllers":1558,"@metamask/snaps-rpc-methods":1626,"@metamask/transaction-controller":1753,"@metamask/user-operation-controller":1770,"@sentry/browser":1878,"await-semaphore":2347,buffer:2459,"eth-json-rpc-filters":2753,"eth-json-rpc-filters/subscriptionManager":2755,"eth-lattice-keyring":2757,"eth-rpc-errors":2790,events:2875,"json-rpc-engine":3238,"json-rpc-middleware-stream":3242,lodash:3444,loglevel:3454,nanoid:3519,pump:3611},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){(function(t){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.METAMASK_CONTROLLER_EVENTS=void 0;var n=ut(e("events")),o=ut(e("pump")),s=e("@metamask/assets-controllers"),i=e("@metamask/obs-store"),a=e("@metamask/obs-store/dist/asStream"),l=e("json-rpc-engine"),c=e("json-rpc-middleware-stream"),d=e("@metamask/eth-json-rpc-middleware"),u=e("lodash"),p=e("@metamask/eth-keyring-controller"),h=e("@metamask/keyring-controller"),g=ut(e("eth-json-rpc-filters")),C=ut(e("eth-json-rpc-filters/subscriptionManager")),m=e("eth-rpc-errors"),f=e("await-semaphore"),v=ut(e("loglevel")),k=e("@metamask/eth-trezor-keyring"),b=e("@metamask/eth-ledger-bridge-keyring"),w=ut(e("eth-lattice-keyring")),y=e("@keystonehq/metamask-airgapped-keyring"),S=ut(e("@metamask/eth-query")),T=ut(e("@metamask/ethjs-query")),M=ut(e("nanoid")),A=e("@sentry/browser"),E=e("@metamask/address-book-controller"),P=e("@metamask/approval-controller"),N=e("@metamask/base-controller"),R=e("@metamask/phishing-controller"),I=e("@metamask/announcement-controller"),_=e("@metamask/network-controller"),O=e("@metamask/gas-fee-controller"),F=e("@metamask/permission-controller"),x=ut(e("@metamask/smart-transactions-controller")),D=e("@metamask/selected-network-controller"),L=e("@metamask/logging-controller"),U=e("@metamask/rate-limit-controller"),B=e("@metamask/notification-controller"),j=e("@metamask/snaps-controllers"),q=e("@metamask/snaps-rpc-methods"),K=e("@metamask/accounts-controller"),G=e("@metamask/signature-controller"),$=e("@metamask/ppom-validator"),V=e("@metamask/desktop/dist/controllers/desktop"),H=e("@metamask/controller-utils"),W=e("@metamask/scure-bip39/dist/wordlists/english"),z=e("@metamask/name-controller"),Q=e("@metamask/queued-request-controller"),Y=e("@metamask/user-operation-controller"),J=e("@metamask/transaction-controller"),X=e("@metamask/post-message-stream"),Z=e("../../shared/constants/transaction"),ee=e("../../shared/constants/swaps"),te=e("../../shared/constants/network"),re=e("../../shared/constants/hardware-wallets"),ne=e("../../shared/constants/keyring"),oe=e("../../shared/constants/permissions"),se=e("../../shared/notifications"),ie=e("../../shared/constants/time"),ae=e("../../shared/constants/app"),le=e("../../shared/constants/metametrics"),ce=e("../../shared/constants/logs"),de=e("../../shared/lib/token-util.ts"),ue=e("../../shared/modules/string-utils"),pe=e("../../shared/modules/transaction.utils"),he=e("../../shared/constants/tokens"),ge=e("../../shared/lib/metamask-controller-utils"),Ce=e("../../shared/modules/mv3.utils"),me=e("../../shared/modules/conversion.utils"),fe=e("../../shared/modules/network.utils"),ve=e("./lib/transaction/metrics"),ke=e("./lib/keyring-snaps-permissions"),be=e("./lib/SnapsNameProvider"),we=e("./lib/AddressBookPetnamesBridge"),ye=e("./lib/ppom/ppom-middleware"),Se=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=dt(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var i=o?Object.getOwnPropertyDescriptor(e,s):null;i&&(i.get||i.set)?Object.defineProperty(n,s,i):n[s]=e[s]}return n.default=e,r&&r.set(e,n),n}(e("./lib/ppom/ppom")),Te=e("./detect-multiple-instances"),Me=ut(e("./lib/ComposableObservableStore")),Ae=ut(e("./lib/account-tracker")),Ee=ut(e("./lib/createDupeReqFilterMiddleware")),Pe=ut(e("./lib/createLoggerMiddleware")),Ne=e("./lib/rpc-method-middleware"),Re=ut(e("./lib/createOriginMiddleware")),Ie=ut(e("./lib/createTabIdMiddleware")),_e=e("./controllers/network-order"),Oe=e("./controllers/account-order"),Fe=ut(e("./lib/createOnboardingMiddleware")),xe=e("./lib/stream-utils"),De=ut(e("./controllers/ens")),Le=ut(e("./controllers/preferences")),Ue=ut(e("./controllers/app-state")),Be=ut(e("./controllers/alert")),je=ut(e("./controllers/onboarding")),qe=ut(e("./lib/backup")),Ke=ut(e("./controllers/decrypt-message")),Ge=ut(e("./controllers/detect-tokens")),$e=ut(e("./controllers/swaps")),Ve=ut(e("./controllers/metametrics")),He=e("./lib/segment"),We=ut(e("./lib/createMetaRPCHandler")),ze=e("./lib/util"),Qe=ut(e("./lib/createMetamaskMiddleware")),Ye=e("./lib/hardware-keyring-builder-factory"),Je=ut(e("./controllers/encryption-public-key")),Xe=ut(e("./controllers/app-metadata")),Ze=e("./controllers/permissions"),et=ut(e("./lib/createRPCMethodTrackingMiddleware")),tt=e("./lib/security-provider-helpers"),rt=e("./lib/ppom/indexed-db-backend"),nt=e("./translate"),ot=e("./lib/offscreen-bridge/trezor-offscreen-bridge"),st=e("./lib/offscreen-bridge/ledger-offscreen-bridge"),it=e("./lib/snap-keyring"),at=e("./lib/encryptor-factory"),lt=e("./lib/transaction/util"),ct=e("./lib/offscreen-bridge/lattice-offscreen-keyring");function dt(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(dt=function(e){return e?r:t})(e)}function ut(e){return e&&e.__esModule?e:{default:e}}function pt(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(r!==undefined){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange"};class ht extends n.default{constructor(e){var t,r;super(),pt(this,"_trackSnapExportUsage",(0,u.wrap)((0,u.memoize)((()=>(0,u.throttle)(((e,t,r,n)=>{var o;return this.metaMetricsController.trackEvent({event:le.MetaMetricsEventName.SnapExportUsed,category:le.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,export:t,snap_category:null===(o=this._getSnapMetadata(e))||void 0===o?void 0:o.category,success:r,origin:n}})}),60*ie.SECOND)),((e,t,r,n)=>`${e}${t}${n}`)),((e,...t)=>e(...t)(...t)))),pt(this,"handleWatchAssetRequest",(({asset:e,type:t,origin:r,networkClientId:n})=>{switch(t){case H.ERC20:return this.tokensController.watchAsset({asset:e,type:t,networkClientId:n});case H.ERC721:case H.ERC1155:return this.nftController.watchNft(e,t,r);default:throw new Error(`Asset type ${t} not supported`)}})),pt(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof F.PermissionsRequestNotFoundError))throw e}})),pt(this,"updateCaveat",((e,t,r,n)=>{try{this.controllerMessenger.call("PermissionController:updateCaveat",e,t,r,n)}catch(e){if(!(e instanceof F.PermissionsRequestNotFoundError))throw e}})),pt(this,"updateNetworksList",(e=>{try{this.networkOrderController.updateNetworksList(e)}catch(e){throw v.default.error(e.message),e}})),pt(this,"updateAccountsList",(e=>{try{this.accountOrderController.updateAccountsList(e)}catch(e){throw v.default.error(e.message),e}})),pt(this,"updateHiddenAccountsList",(e=>{try{this.accountOrderController.updateHiddenAccountsList(e)}catch(e){throw v.default.error(e.message),e}})),pt(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof F.PermissionsRequestNotFoundError))throw e}})),pt(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof F.PermissionsRequestNotFoundError))throw e}})),pt(this,"resolvePendingApproval",(async(e,t,r)=>{try{await this.approvalController.accept(e,t,r)}catch(e){if(!(e instanceof P.ApprovalRequestNotFoundError))throw e}})),pt(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new m.EthereumRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof P.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:n}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,u.debounce)(this.privateSendUpdate.bind(this),200*ie.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const o=e.initState||{},i=this.platform.getVersion();this.recordFirstTimeInfo(o),this.featureFlags=e.featureFlags,this.activeControllerConnections=0,this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.controllerMessenger=new N.ControllerMessenger,this.loggingController=new L.LoggingController({messenger:this.controllerMessenger.getRestricted({name:"LoggingController"}),state:o.LoggingController}),this.localStoreApiWrapper=e.localStore,this.currentMigrationVersion=e.currentMigrationVersion,this.store=new Me.default({state:o,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new f.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&("8.1.0"===i&&this.platform.openExtensionInBrowser(),this.loggingController.add({type:L.LogType.GenericLog,data:{event:ce.LOG_EVENT.VERSION_UPDATE,previousVersion:e.previousVersion,version:i}}))})),this.appMetadataController=new Xe.default({state:o.AppMetadataController,currentMigrationVersion:this.currentMigrationVersion,currentAppVersion:i}),this.queuedRequestController=new Q.QueuedRequestController({messenger:this.controllerMessenger.getRestricted({name:"QueuedRequestController"})}),this.approvalController=new P.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[H.ApprovalType.EthSign,H.ApprovalType.PersonalSign,H.ApprovalType.EthSignTypedData,H.ApprovalType.Transaction,H.ApprovalType.WatchAsset,H.ApprovalType.EthGetEncryptionPublicKey,H.ApprovalType.EthDecrypt]});const a=this.controllerMessenger.getRestricted({name:"NetworkController"});let l={};o.NetworkController&&(l=o.NetworkController),this.networkController=new _.NetworkController({messenger:a,state:l,infuraProjectId:e.infuraProjectId,trackMetaMetricsEvent:(...e)=>this.metaMetricsController.trackEvent(...e)}),this.networkController.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker,this.deprecatedNetworkId=null,this.updateDeprecatedNetworkId(),a.subscribe("NetworkController:networkDidChange",(()=>this.updateDeprecatedNetworkId()));const c=this.controllerMessenger.getRestricted({name:"TokenListController",allowedEvents:["NetworkController:stateChange"]});this.selectedNetworkController=new D.SelectedNetworkController({messenger:this.controllerMessenger.getRestricted({name:"SelectedNetworkController",allowedActions:["NetworkController:getNetworkClientById"],allowedEvents:["NetworkController:stateChange"]})}),this.tokenListController=new s.TokenListController({chainId:this.networkController.state.providerConfig.chainId,preventPollingOnNetworkRestart:!o.TokenListController||o.TokenListController.preventPollingOnNetworkRestart,messenger:c,state:o.TokenListController}),this.preferencesController=new Le.default({initState:o.PreferencesController,initLangCode:e.initLangCode,tokenListController:this.tokenListController,provider:this.provider,networkConfigurations:this.networkController.state.networkConfigurations}),this.assetsContractController=new s.AssetsContractController({chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:e=>this.preferencesController.store.subscribe(e),onNetworkDidChange:e=>a.subscribe("NetworkController:networkDidChange",(()=>{const t=this.networkController.state;return e(t)})),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{provider:this.provider},o.AssetsContractController);const d=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest"],allowedEvents:["NetworkController:stateChange","AccountsController:selectedAccountChange"]});this.tokensController=new s.TokensController({messenger:d,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:e=>this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(t=>{e({selectedAddress:t.address})})),onNetworkDidChange:e=>a.subscribe("NetworkController:networkDidChange",(()=>{const t=this.networkController.state;return e(t)})),onTokenListStateChange:e=>this.controllerMessenger.subscribe(`${this.tokenListController.name}:stateChange`,e),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController),getERC20TokenName:this.assetsContractController.getERC20TokenName.bind(this.assetsContractController),config:{provider:this.provider,selectedAddress:(null===(t=o.AccountsController)||void 0===t||null===(t=t.internalAccounts)||void 0===t||null===(t=t.accounts[null===(r=o.AccountsController)||void 0===r||null===(r=r.internalAccounts)||void 0===r?void 0:r.selectedAccount])||void 0===t?void 0:t.address)??""},state:o.TokensController});const g=this.controllerMessenger.getRestricted({name:"NftController",allowedActions:[`${this.approvalController.name}:addRequest`]});this.nftController=new s.NftController({messenger:g,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getERC721AssetName:this.assetsContractController.getERC721AssetName.bind(this.assetsContractController),getERC721AssetSymbol:this.assetsContractController.getERC721AssetSymbol.bind(this.assetsContractController),getERC721TokenURI:this.assetsContractController.getERC721TokenURI.bind(this.assetsContractController),getERC721OwnerOf:this.assetsContractController.getERC721OwnerOf.bind(this.assetsContractController),getERC1155BalanceOf:this.assetsContractController.getERC1155BalanceOf.bind(this.assetsContractController),getERC1155TokenURI:this.assetsContractController.getERC1155TokenURI.bind(this.assetsContractController),onNftAdded:({address:e,symbol:t,tokenId:r,standard:n,source:o})=>this.metaMetricsController.trackEvent({event:le.MetaMetricsEventName.NftAdded,category:le.MetaMetricsEventCategory.Wallet,sensitiveProperties:{token_contract_address:e,token_symbol:t,token_id:r,token_standard:n,asset_type:Z.AssetType.NFT,source:o}}),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{},o.NftController),this.nftController.setApiKey(null),this.nftDetectionController=new s.NftDetectionController({chainId:this.networkController.state.providerConfig.chainId,onNftsStateChange:e=>this.nftController.subscribe(e),onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getOpenSeaApiKey:()=>this.nftController.openSeaApiKey,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),addNft:this.nftController.addNft.bind(this.nftController),getNftApi:this.nftController.getNftApi.bind(this.nftController),getNftState:()=>this.nftController.state}),this.metaMetricsController=new Ve.default({segment:He.segment,preferencesStore:this.preferencesController.store,onNetworkDidChange:a.subscribe.bind(a,"NetworkController:networkDidChange"),getNetworkIdentifier:()=>{const{type:e,rpcUrl:t}=this.networkController.state.providerConfig;return e===te.NETWORK_TYPES.RPC?t:e},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,version:this.platform.getVersion(),environment:"production",extension:this.extension,initState:o.MetaMetricsController,captureException:A.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const C=this.controllerMessenger.getRestricted({name:"GasFeeController",allowedActions:["NetworkController:getEIP1559Compatibility","NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]}),S=ee.GAS_API_BASE_URL;this.gasFeeController=new O.GasFeeController({state:o.GasFeeController,interval:1e4,messenger:C,clientId:ee.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkDidChange:e=>{a.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${S}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${S}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>{const{chainId:e}=this.networkController.state.providerConfig;return e===te.CHAIN_IDS.BSC},getChainId:()=>this.networkController.state.providerConfig.chainId}),this.appStateController=new Ue.default({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:o.AppStateController,onInactiveTimeout:()=>this.setLocked(),preferencesStore:this.preferencesController.store,messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`],allowedEvents:["KeyringController:qrKeyringStateChange"]}),extension:this.extension});const T=this.controllerMessenger.getRestricted({name:"CurrencyRateController",allowedActions:[`${this.networkController.name}:getNetworkClientById`]});this.currencyRateController=new s.CurrencyRateController({includeUsdRate:!0,messenger:T,state:o.CurrencyController});const M=this.controllerMessenger.getRestricted({name:"PhishingController"});this.phishingController=new R.PhishingController({messenger:M,state:o.PhishingController,hotlistRefreshInterval:undefined,stalelistRefreshInterval:undefined}),this.phishingController.maybeUpdateState(),this.ppomController=new $.PPOMController({messenger:this.controllerMessenger.getRestricted({name:"PPOMController",allowedEvents:["NetworkController:stateChange"]}),storageBackend:new rt.IndexedDBPPOMStorage("PPOMDB",1),provider:this.provider,ppomProvider:{PPOM:Se.PPOM,ppomInit:Se.default},state:o.PPOMController,chainId:this.networkController.state.providerConfig.chainId,securityAlertsEnabled:this.preferencesController.store.getState().securityAlertsEnabled,onPreferencesChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),cdnBaseUrl:"static.metafi.codefi.network/api/v1/confirmations/ppom",blockaidPublicKey:"066ad3e8af5583385e312c156d238055215d5f25247c1e91055afa756cb98a88"});const q=this.controllerMessenger.getRestricted({name:"AnnouncementController"});this.announcementController=new I.AnnouncementController({messenger:q,allAnnouncements:se.UI_NOTIFICATIONS,state:o.AnnouncementController});const W=this.controllerMessenger.getRestricted({name:"NetworkOrderController",allowedEvents:["NetworkController:stateChange"]});this.networkOrderController=new _e.NetworkOrderController({messenger:W,state:o.NetworkOrderController});const re=this.controllerMessenger.getRestricted({name:"AccountOrderController"});this.accountOrderController=new Oe.AccountOrderController({messenger:re,state:o.AccountOrderController});const ne=this.controllerMessenger.getRestricted({name:"AccountsController",allowedEvents:["SnapController:stateChange","KeyringController:accountRemoved","KeyringController:stateChange","AccountsController:selectedAccountChange"],allowedActions:["AccountsController:setCurrentAccount","AccountsController:setAccountName","AccountsController:listAccounts","AccountsController:getSelectedAccount","AccountsController:getAccountByAddress","AccountsController:updateAccounts","KeyringController:getAccounts","KeyringController:getKeyringsByType","KeyringController:getKeyringForAccount"]});this.accountsController=new K.AccountsController({messenger:ne,state:o.AccountsController}),this.tokenRatesController=new s.TokenRatesController({chainId:this.networkController.state.providerConfig.chainId,ticker:this.networkController.state.providerConfig.ticker,selectedAddress:this.accountsController.getSelectedAccount().address,onTokensStateChange:e=>this.tokensController.subscribe(e),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),onPreferencesStateChange:e=>this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(t=>{e({selectedAddress:t.address})})),tokenPricesService:new s.CodefiTokenPricesServiceV2,getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{allTokens:this.tokensController.state.allTokens,allDetectedTokens:this.tokensController.state.allDetectedTokens},o.TokenRatesController),this.preferencesController.store.getState().useCurrencyRateCheck&&this.tokenRatesController.start(),this.preferencesController.store.subscribe((0,ze.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:r}=e,{useCurrencyRateCheck:n}=t;n&&!r?(this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId),this.tokenRatesController.start()):!n&&r&&(this.currencyRateController.stopAllPolling(),this.tokenRatesController.stop())}),this.preferencesController.store.getState())),this.ensController=new De.default({provider:this.provider,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,onNetworkDidChange:a.subscribe.bind(a,"NetworkController:networkDidChange")}),this.onboardingController=new je.default({initState:o.OnboardingController});let de=[(0,p.keyringBuilderFactory)(y.MetaMaskKeyring)];if(!1===Ce.isManifestV3){var ue;const e=null===(ue=this.opts.overrides)||void 0===ue?void 0:ue.keyrings,t=[(null==e?void 0:e.lattice)||w.default,y.MetaMaskKeyring],r=[{keyring:(null==e?void 0:e.trezor)||k.TrezorKeyring,bridge:(null==e?void 0:e.trezorBridge)||k.TrezorConnectBridge},{keyring:(null==e?void 0:e.ledger)||b.LedgerKeyring,bridge:(null==e?void 0:e.ledgerBridge)||b.LedgerIframeBridge}];de=t.map((e=>(0,p.keyringBuilderFactory)(e))),r.forEach((e=>de.push((0,Ye.hardwareKeyringBuilderFactory)(e.keyring,e.bridge))))}else de.push((0,Ye.hardwareKeyringBuilderFactory)(k.TrezorKeyring,ot.TrezorOffscreenBridge),(0,Ye.hardwareKeyringBuilderFactory)(b.LedgerKeyring,st.LedgerOffscreenBridge),(0,p.keyringBuilderFactory)(ct.LatticeKeyringOffscreen));const pe=this.controllerMessenger.getRestricted({name:"SnapKeyringBuilder",allowedActions:["ApprovalController:addRequest","ApprovalController:acceptRequest","ApprovalController:rejectRequest","ApprovalController:startFlow","ApprovalController:endFlow","ApprovalController:showSuccess","ApprovalController:showError","PhishingController:test","PhishingController:maybeUpdateState","KeyringController:getAccounts","SubjectMetadataController:getSubjectMetadata","AccountsController:setSelectedAccount","AccountsController:getAccountByAddress"]});de.push((0,it.snapKeyringBuilder)(pe,(()=>this.snapController),(async()=>await this.keyringController.persistAllKeyrings()),(e=>this.preferencesController.setSelectedAddress(e)),(e=>this.removeAccount(e))));const he=this.controllerMessenger.getRestricted({name:"KeyringController"});this.keyringController=new h.KeyringController({cacheEncryptionKey:!0,keyringBuilders:de,state:o.KeyringController,encryptor:e.encryptor||(0,at.encryptorFactory)(6e5),messenger:he,removeIdentity:this.preferencesController.removeAddress.bind(this.preferencesController),setAccountLabel:(e,t)=>{const r=this.accountsController.getAccountByAddress(e);if(r===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(r.id,t),this.preferencesController.setAccountLabel(e,t)},setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(t===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id),this.preferencesController.setSelectedAddress(e)},syncIdentities:e=>{this.preferencesController.syncAddresses(e)},updateIdentities:this.preferencesController.setAddresses.bind(this.preferencesController)}),this.controllerMessenger.subscribe("KeyringController:unlock",(()=>this._onUnlock())),this.controllerMessenger.subscribe("KeyringController:lock",(()=>this._onLock())),this.controllerMessenger.subscribe("KeyringController:stateChange",(e=>{this._onKeyringControllerUpdate(e)})),this.permissionController=new F.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:o.PermissionController,caveatSpecifications:(0,Ze.getCaveatSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController)}),permissionSpecifications:{...(0,Ze.getPermissionSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController),getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e=[],t=[])=>{const r=t.filter((t=>!e.some((e=>e.address.toLowerCase()===t.toLowerCase())))).map((e=>this.keyringController.getAccountKeyringType(e))),n=e.length,o=Object.keys(this.accountTracker.store.getState().accounts||{}).length;(0,A.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${n} identities, and the ${r} keyrings included accounts with missing identities. Meanwhile, there are ${o} accounts in the account tracker.`))}}),...this.getSnapPermissionSpecifications()},unrestrictedMethods:Ze.unrestrictedMethods}),this.permissionLogController=new Ze.PermissionLogController({restrictedMethods:new Set(Object.keys(oe.RestrictedMethods)),initState:o.PermissionLogController}),this.subjectMetadataController=new F.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:o.SubjectMetadataController,subjectCacheLimit:100}),this.runtimeStream=new X.BrowserRuntimePostMessageStream({name:"parent",target:"child"}),this.runtimeStream.on("data",(e=>{console.log("Service worker received data from offscreen document",e)}));const ge={iframeUrl:new URL("https://execution.metamask.io/3.5.0/index.html"),messenger:this.controllerMessenger.getRestricted({name:"ExecutionService"}),setupSnapProvider:this.setupSnapProvider.bind(this)};this.snapExecutionService=new j.IframeExecutionService(ge);const me=this.controllerMessenger.getRestricted({name:"SnapController",allowedEvents:["ExecutionService:unhandledError","ExecutionService:outboundRequest","ExecutionService:outboundResponse"],allowedActions:[`${this.permissionController.name}:getEndowments`,`${this.permissionController.name}:getPermissions`,`${this.permissionController.name}:hasPermission`,`${this.permissionController.name}:hasPermissions`,`${this.permissionController.name}:requestPermissions`,`${this.permissionController.name}:revokeAllPermissions`,`${this.permissionController.name}:revokePermissions`,`${this.permissionController.name}:revokePermissionForAllSubjects`,`${this.permissionController.name}:getSubjectNames`,`${this.permissionController.name}:updateCaveat`,`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:updateRequestState`,`${this.permissionController.name}:grantPermissions`,`${this.subjectMetadataController.name}:getSubjectMetadata`,`${this.subjectMetadataController.name}:addSubjectMetadata`,`${this.phishingController.name}:maybeUpdateState`,`${this.phishingController.name}:testOrigin`,"ExecutionService:executeSnap","ExecutionService:getRpcRequestHandler","ExecutionService:terminateSnap","ExecutionService:terminateAllSnaps","ExecutionService:handleRpcRequest","SnapsRegistry:get","SnapsRegistry:getMetadata","SnapsRegistry:update","SnapsRegistry:resolveVersion"]}),fe=!1;this.snapController=new j.SnapController({environmentEndowmentPermissions:Object.values(oe.EndowmentPermissions),excludedPermissions:{...oe.ExcludedSnapPermissions,...oe.ExcludedSnapEndowments},closeAllConnections:this.removeAllConnections.bind(this),state:o.SnapController,messenger:me,featureFlags:{dappsCanUpdateSnaps:!0,allowLocalSnaps:!0,requireAllowlist:fe}}),this.notificationController=new B.NotificationController({messenger:this.controllerMessenger.getRestricted({name:"NotificationController"}),state:o.NotificationController}),this.rateLimitController=new U.RateLimitController({state:o.RateLimitController,messenger:this.controllerMessenger.getRestricted({name:"RateLimitController"}),implementations:{showNativeNotification:{method:(e,t)=>{const r=this.controllerMessenger.call("SubjectMetadataController:getState").subjectMetadata[e];return this.platform._showNotification((null==r?void 0:r.name)??e,t).catch((e=>{v.default.error("Failed to create notification",e)})),null},rateLimitCount:2,rateLimitTimeout:3e5},showInAppNotification:{method:(e,t)=>(this.controllerMessenger.call("NotificationController:show",e,t),null),rateLimitCount:5,rateLimitTimeout:6e4}}});const ve=this.controllerMessenger.getRestricted({name:"CronjobController",allowedEvents:["SnapController:snapInstalled","SnapController:snapUpdated","SnapController:snapUninstalled","SnapController:snapEnabled","SnapController:snapDisabled"],allowedActions:[`${this.permissionController.name}:getPermissions`,"SnapController:handleRequest","SnapController:getAll"]});this.cronjobController=new j.CronjobController({state:o.CronjobController,messenger:ve});const ke=this.controllerMessenger.getRestricted({name:"SnapsRegistry",allowedEvents:[],allowedActions:[]});this.snapsRegistry=new j.JsonSnapsRegistry({state:o.SnapsRegistry,messenger:ke,refetchOnAllowlistMiss:fe,failOnUnavailableRegistry:fe,url:{registry:"https://acl.execution.metamask.io/latest/registry.json",signature:"https://acl.execution.metamask.io/latest/signature.json"},publicKey:"0x025b65308f0f0fb8bc7f7ff87bfc296e0330eee5d3c1d1ee4a048b2fd6a86fa0a6"}),this.accountTracker=new Ae.default({provider:this.provider,blockTracker:this.blockTracker,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getNetworkIdentifier:e=>{const{type:t,rpcUrl:r}=e??this.networkController.state.providerConfig;return t===te.NETWORK_TYPES.RPC?r:t},preferencesController:this.preferencesController,onboardingController:this.onboardingController,controllerMessenger:this.controllerMessenger.getRestricted({name:"AccountTracker",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]}),initState:{accounts:{}},onAccountRemoved:this.controllerMessenger.subscribe.bind(this.controllerMessenger,"KeyringController:accountRemoved")}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.store.getState();e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.onboardingController.store.subscribe((0,ze.previousValueComparator)((async(e,t)=>{const{completedOnboarding:r}=e,{completedOnboarding:n}=t;!r&&n&&this.triggerNetworkrequests()}),this.onboardingController.store.getState())),this.desktopController=new V.DesktopController({initState:o.DesktopController});const ye=this.controllerMessenger.getRestricted({name:"DetectTokensController",allowedActions:["KeyringController:getState"],allowedEvents:["NetworkController:stateChange","KeyringController:lock","KeyringController:unlock","AccountsController:selectedAccountChange","TokenListController:stateChange"]});this.detectTokensController=new Ge.default({messenger:ye,preferences:this.preferencesController,tokensController:this.tokensController,getCurrentSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),assetsContractController:this.assetsContractController,network:this.networkController,tokenList:this.tokenListController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)}),this.addressBookController=new E.AddressBookController(undefined,o.AddressBookController),this.alertController=new Be.default({initState:o.AlertController,preferencesStore:this.preferencesController.store,controllerMessenger:this.controllerMessenger.getRestricted({name:"AlertController",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]})}),this.backup=new qe.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,accountsController:this.accountsController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.snapAndHardwareMetricsParams={getSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]})},this.txController=new J.TransactionController({blockTracker:this.blockTracker,cancelMultiplier:1.1,getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getNetworkState:()=>this.networkController.state,getPermittedAccounts:this.getPermittedAccounts.bind(this),getSavedGasFees:()=>this.preferencesController.store.getState().advancedGasFee[this.networkController.state.providerConfig.chainId],getSelectedAddress:()=>this.accountsController.getSelectedAccount().address,incomingTransactions:{includeTokenTransfers:!1,isEnabled:()=>{var e;return Boolean((null===(e=this.preferencesController.store.getState().incomingTransactionsPreferences)||void 0===e?void 0:e[this.networkController.state.providerConfig.chainId])&&this.onboardingController.store.getState().completedOnboarding)},queryEntireHistory:!1,updateTransactions:!1},messenger:this.controllerMessenger.getRestricted({name:"TransactionController",allowedActions:[`${this.approvalController.name}:addRequest`]}),onNetworkStateChange:e=>{a.subscribe("NetworkController:networkDidChange",(()=>e()))},provider:this.provider,hooks:{}},{sign:(...e)=>this.keyringController.signTransaction(...e)},o.TransactionController),this._addTransactionControllerListeners(),a.subscribe("NetworkController:networkDidChange",(async()=>{try{this.preferencesController.store.getState().useCurrencyRateCheck&&(await this.currencyRateController.stopAllPolling(),this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId))}catch(e){console.error(e)}})),this.networkController.lookupNetwork(),this.decryptMessageController=new Ke.default({getState:this.getState.bind(this),messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,`${this.keyringController.name}:decryptMessage`]}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new Je.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),getEncryptionPublicKey:this.keyringController.getEncryptionPublicKey.bind(this.keyringController),getAccountKeyringType:this.keyringController.getAccountKeyringType.bind(this.keyringController),getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new G.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.keyringController.name}:signMessage`,`${this.keyringController.name}:signPersonalMessage`,`${this.keyringController.name}:signTypedMessage`,`${this.loggingController.name}:add`]}),isEthSignEnabled:()=>{var e;return null===(e=this.preferencesController.store.getState())||void 0===e||null===(e=e.disabledRpcMethodPreferences)||void 0===e?void 0:e.eth_sign},getAllState:this.getState.bind(this),securityProviderRequest:this.securityProviderRequest.bind(this),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId}),this.signatureController.hub.on("cancelWithReason",(({message:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:le.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})})),this.swapsController=new $e.default({getBufferedGasLimit:async(e,t)=>{const{gas:r,simulationFails:n}=await this.txController.estimateGasBuffered(e.txParams,t);return{gasLimit:r,simulationFails:n}},provider:this.provider,getProviderConfig:()=>this.networkController.state.providerConfig,getTokenRatesState:()=>this.tokenRatesController.state,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},o.SwapsController),this.smartTransactionsController=new x.default({getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getNonceLock:this.txController.nonceTracker.getNonceLock.bind(this.txController.nonceTracker),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),provider:this.provider,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},{supportedChainIds:[te.CHAIN_IDS.MAINNET,te.CHAIN_IDS.GOERLI]},o.SmartTransactionsController);const Ee=()=>this.preferencesController.store.getState().useExternalNameSources;this.nameController=new z.NameController({messenger:this.controllerMessenger.getRestricted({name:"NameController",allowedActions:[]}),providers:[new z.ENSNameProvider({reverseLookup:this.ensController.reverseResolveAddress.bind(this.ensController)}),new z.EtherscanNameProvider({isEnabled:Ee}),new z.TokenNameProvider({isEnabled:Ee}),new z.LensNameProvider({isEnabled:Ee}),new be.SnapsNameProvider({messenger:this.controllerMessenger.getRestricted({name:"SnapsNameProvider",allowedActions:["SnapController:getAll","SnapController:get","SnapController:handleRequest","PermissionController:getState"]})})],state:o.NameController}),new we.AddressBookPetnamesBridge({addressBookController:this.addressBookController,nameController:this.nameController,messenger:this.controllerMessenger.getRestricted({name:"AddressBookPetnamesBridge",allowedEvents:["NameController:stateChange"]})}).init(),this.userOperationController=new Y.UserOperationController({entrypoint:"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),messenger:this.controllerMessenger.getRestricted({name:"UserOperationController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById"]}),state:o.UserOperationController}),this.userOperationController.hub.on("user-operation-added",this._onUserOperationAdded.bind(this)),this.userOperationController.hub.on("transaction-updated",this._onUserOperationTransactionUpdated.bind(this)),a.subscribe("NetworkController:networkDidChange",(()=>{this.accountTracker.updateAccounts()})),a.subscribe("NetworkController:networkWillChange",(()=>{this.encryptionPublicKeyController.clearUnapproved(),this.decryptMessageController.clearUnapproved(),this.signatureController.clearUnapproved(),this.approvalController.clear(m.ethErrors.provider.userRejectedRequest())})),this.metamaskMiddleware=(0,Qe.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${i}`},version:i,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===ae.ORIGIN_METAMASK){const e=this.accountsController.getSelectedAccount().address;return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:(e,t)=>(0,lt.addDappTransaction)(this.getAddTransactionRequest({transactionParams:e,dappRequest:t})),processEthSignMessage:this.signatureController.newUnsignedMessage.bind(this.signatureController),processTypedMessage:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV3:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV4:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processPersonalMessage:this.signatureController.newUnsignedPersonalMessage.bind(this.signatureController),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.state.transactions.find((t=>t.hash===e&&t.status===J.TransactionStatus.submitted))}),this.on("update",(e=>this._onStateUpdate(e)));const Pe={AccountTracker:this.accountTracker.store,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController.store,EnsController:this.ensController.store,ApprovalController:this.approvalController,PPOMController:this.ppomController};this.store.updateStructure({AccountsController:this.accountsController,AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController.store,TransactionController:this.txController,KeyringController:this.keyringController,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,NotificationController:this.notificationController,DesktopController:this.desktopController.store,PPOMController:this.ppomController,NameController:this.nameController,UserOperationController:this.userOperationController,...Pe}),this.memStore=new Me.default({config:{AccountsController:this.accountsController,AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController.store,NetworkController:this.networkController,KeyringController:this.keyringController,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,TxController:this.txController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,NotificationController:this.notificationController,DesktopController:this.desktopController.store,NameController:this.nameController,UserOperationController:this.userOperationController,...Pe},controllerMessenger:this.controllerMessenger});const Ne=[this.accountTracker.resetState,this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState,this.ensController.resetState,this.approvalController.clear.bind(this.approvalController)];Ce.isManifestV3?!0===n&&(this.resetStates(Ne),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(Ne);!this.isUnlocked()&&this.onboardingController.store.getState().completedOnboarding,this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(Te.onMessageReceived),(0,Te.checkForMultipleVersionsRunning)()}triggerNetworkrequests(){this.accountTracker.start(),this.txController.startIncomingTransactionPolling(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.start()}stopNetworkRequests(){this.accountTracker.stop(),this.txController.stopIncomingTransactionPolling(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.stopAllPolling(),this.preferencesController.store.getState().useTokenDetection&&(this.tokenListController.stop(),this.tokenRatesController.stop())}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}async getSnapKeyring(){let[e]=this.keyringController.getKeyringsByType(ne.KeyringType.snap);return e||(e=await this.keyringController.addNewKeyring(ne.KeyringType.snap)),e}trackInsightSnapView(e){this.metaMetricsController.trackEvent({event:le.MetaMetricsEventName.InsightSnapViewed,category:le.MetaMetricsEventCategory.Snaps,properties:{snap_id:e}})}_getSnapMetadata(e){var t;return null===(t=this.snapsRegistry.state.database)||void 0===t||null===(t=t.verifiedSnaps)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.metadata}async handleSnapRequest(e){try{const t=await this.controllerMessenger.call("SnapController:handleRequest",e);return this._trackSnapExportUsage(e.snapId,e.handler,!0,e.origin),t}catch(t){throw this._trackSnapExportUsage(e.snapId,e.handler,!1,e.origin),t}}getLocale(){const{currentLocale:e}=this.preferencesController.store.getState();return e}getSnapPermissionSpecifications(){const e=(0,at.encryptorFactory)(1e4);return{...(0,j.buildSnapEndowmentSpecifications)(Object.keys(oe.ExcludedSnapEndowments)),...(0,j.buildSnapRestrictedMethodSpecifications)(Object.keys(oe.ExcludedSnapPermissions),{encrypt:e.encrypt,decrypt:e.decrypt,getLocale:this.getLocale.bind(this),clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.handleSnapRequest.bind(this),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),showDialog:(e,t,r,n)=>this.approvalController.addAndShowApprovalRequest({origin:e,type:ae.SNAP_DIALOG_TYPES[t],requestData:{content:r,placeholder:n}}),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,t.message),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState"),maybeUpdatePhishingList:()=>{const{usePhishDetect:e}=this.preferencesController.store.getState();e&&this.controllerMessenger.call("PhishingController:maybeUpdateState")},isOnPhishingList:e=>{const{usePhishDetect:t}=this.preferencesController.store.getState();return!!t&&this.controllerMessenger.call("PhishingController:testOrigin",e).result},getSnapKeyring:this.getSnapKeyring.bind(this)})}}dismissNotifications(e){this.notificationController.dismiss(e)}markNotificationsAsRead(e){this.notificationController.markRead(e)}setupControllerEventSubscriptions(){let e;this.preferencesController.store.subscribe((async e=>{var t;const{currentLocale:r}=e,{chainId:n}=this.networkController.state.providerConfig;await(0,nt.updateCurrentLocale)(r),null!==(t=e.incomingTransactionsPreferences)&&void 0!==t&&t[n]?this.txController.startIncomingTransactionPolling():this.txController.stopIncomingTransactionPolling()})),this.controllerMessenger.subscribe(`${this.accountsController.name}:selectedAccountChange`,(async t=>{t.address&&t.address!==e&&(e=t.address,await this._onAccountChange(t.address))})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const r=(0,Ze.getChangedAccounts)(e,t);for(const[e,t]of r.entries())this._notifyAccountsChange(e,t)}),Ze.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe("NetworkController:networkDidChange",(async()=>{await this.txController.updateIncomingTransactions()})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,((e,t)=>{var r;const n=e.id,o=null===(r=this._getSnapMetadata(n))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:le.MetaMetricsEventName.SnapInstalled,category:le.MetaMetricsEventCategory.Snaps,properties:{snap_id:n,version:e.version,origin:t,snap_category:o}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t,r)=>{var n;const o=e.id,s=null===(n=this._getSnapMetadata(o))||void 0===n?void 0:n.category;this.metaMetricsController.trackEvent({event:le.MetaMetricsEventName.SnapUpdated,category:le.MetaMetricsEventCategory.Snaps,properties:{snap_id:o,old_version:t,new_version:e.version,origin:r,snap_category:s}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type.startsWith(oe.RestrictedMethods.snap_dialog)));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUninstalled`,(e=>{var t;const r=Object.values(this.notificationController.state.notifications).reduce(((t,r)=>(r.origin===e.id&&t.push(r.id),t)),[]);this.dismissNotifications(r);const n=e.id,o=null===(t=this._getSnapMetadata(n))||void 0===t?void 0:t.category;this.metaMetricsController.trackEvent({event:le.MetaMetricsEventName.SnapUninstalled,category:le.MetaMetricsEventCategory.Snaps,properties:{snap_id:n,version:e.version,snap_category:o}})}))}createPublicConfigStore(){const e=new i.ObservableStore,t=(e,{isUnlocked:t})=>({isUnlocked:t,chainId:e,networkVersion:this.deprecatedNetworkId??"loading"}),r=r=>{var n;const o=null===(n=r.networksMetadata[r.selectedNetworkClientId])||void 0===n?void 0:n.status,{chainId:s}=this.networkController.state.providerConfig;o===te.NetworkStatus.Available&&e.putState(t(s,r))};return this.on("update",r),r(this.getState()),e}async getProviderState(e){return{isUnlocked:this.isUnlocked(),accounts:await this.getPermittedAccounts(e),...this.getProviderNetworkState(this.preferencesController.getUseRequestQueue()?e:undefined)}}getProviderNetworkState(e="metamask"){let t;if(this.preferencesController.getUseRequestQueue()){const r=this.controllerMessenger.call("SelectedNetworkController:getNetworkClientIdForDomain",e)||this.networkController.state.selectedNetworkClientId;t=this.controllerMessenger.call("NetworkController:getNetworkClientById",r).configuration.chainId}else t=this.networkController.state.providerConfig.chainId;return{chainId:t,networkVersion:this.deprecatedNetworkId??"loading"}}async updateDeprecatedNetworkId(){try{this.deprecatedNetworkId=await this.deprecatedGetNetworkId()}catch(e){console.error(e),this.deprecatedNetworkId=null}this._notifyChainChange()}async deprecatedGetNetworkId(){const e=this.controllerMessenger.call("NetworkController:getEthQuery");if(!e)throw new Error("Provider has not been initialized");return new Promise(((t,r)=>{e.sendAsync({method:"net_version"},((e,n)=>{e?r(e):t((0,fe.convertNetworkId)(n))}))}))}getState(){const{vault:e}=this.keyringController.state,t=Boolean(e),r=this.memStore.getFlatState();return delete r.vault,{isInitialized:t,...r,snapStates:{},unencryptedSnapStates:{},snaps:Object.values(r.snaps??{}).reduce(((e,t)=>{const{sourceCode:r,auxiliaryFiles:n,...o}=t;return e[t.id]=o,e}),{})}}getApi(){const{accountsController:e,addressBookController:t,alertController:r,appStateController:n,keyringController:o,nftController:s,nftDetectionController:i,currencyRateController:a,detectTokensController:l,ensController:c,gasFeeController:d,metaMetricsController:u,networkController:p,announcementController:h,onboardingController:g,permissionController:C,preferencesController:m,swapsController:f,tokensController:v,smartTransactionsController:k,txController:b,assetsContractController:w,backup:y,approvalController:S,phishingController:T}=this;return{getState:this.getState.bind(this),setCurrentCurrency:a.setCurrentCurrency.bind(a),setUseBlockie:m.setUseBlockie.bind(m),setUseNonceField:m.setUseNonceField.bind(m),setUsePhishDetect:m.setUsePhishDetect.bind(m),setUseMultiAccountBalanceChecker:m.setUseMultiAccountBalanceChecker.bind(m),setUseSafeChainsListValidation:m.setUseSafeChainsListValidation.bind(m),setUseTokenDetection:m.setUseTokenDetection.bind(m),setUseNftDetection:m.setUseNftDetection.bind(m),setUse4ByteResolution:m.setUse4ByteResolution.bind(m),setUseCurrencyRateCheck:m.setUseCurrencyRateCheck.bind(m),setOpenSeaEnabled:m.setOpenSeaEnabled.bind(m),getUseRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController),getProviderConfig:()=>this.networkController.state.providerConfig,setSecurityAlertsEnabled:m.setSecurityAlertsEnabled.bind(m),setAddSnapAccountEnabled:m.setAddSnapAccountEnabled.bind(m),setUseExternalNameSources:m.setUseExternalNameSources.bind(m),setUseRequestQueue:this.setUseRequestQueue.bind(this),setIpfsGateway:m.setIpfsGateway.bind(m),setUseAddressBarEnsResolution:m.setUseAddressBarEnsResolution.bind(m),setParticipateInMetaMetrics:u.setParticipateInMetaMetrics.bind(u),setCurrentLocale:m.setCurrentLocale.bind(m),setIncomingTransactionsPreferences:m.setIncomingTransactionsPreferences.bind(m),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),requestUserApproval:S.addAndShowApprovalRequest.bind(S),addNewAccount:this.addNewAccount.bind(this),getSeedPhrase:this.getSeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),getAccountsBySnapId:e=>(0,it.getAccountsBySnapId)(this,e),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),submitQRHardwareCryptoHDKey:o.submitQRCryptoHDKey.bind(o),submitQRHardwareCryptoAccount:o.submitQRCryptoAccount.bind(o),cancelSyncQRHardware:o.cancelQRSynchronization.bind(o),submitQRHardwareSignature:o.submitQRSignature.bind(o),cancelQRHardwareSignRequest:o.cancelQRSignRequest.bind(o),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setProviderType:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setProviderType(e)),setActiveNetwork:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setActiveNetwork(e)),rollbackToPreviousProvider:p.rollbackToPreviousProvider.bind(p),removeNetworkConfiguration:p.removeNetworkConfiguration.bind(p),upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(!t)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id),this.preferencesController.setSelectedAddress(e)},addToken:v.addToken.bind(v),updateTokenType:v.updateTokenType.bind(v),setFeatureFlag:m.setFeatureFlag.bind(m),setPreference:m.setPreference.bind(m),addKnownMethodData:m.addKnownMethodData.bind(m),setDismissSeedBackUpReminder:m.setDismissSeedBackUpReminder.bind(m),setDisabledRpcMethodPreference:m.setDisabledRpcMethodPreference.bind(m),getRpcMethodPreferences:m.getRpcMethodPreferences.bind(m),setAdvancedGasFee:m.setAdvancedGasFee.bind(m),setTheme:m.setTheme.bind(m),setTransactionSecurityCheckEnabled:m.setTransactionSecurityCheckEnabled.bind(m),setSnapsAddSnapAccountModalDismissed:m.setSnapsAddSnapAccountModalDismissed.bind(m),setSelectedInternalAccount:e=>{const t=this.accountsController.getAccount(e);t&&(this.preferencesController.setSelectedAddress(t.address),this.accountsController.setSelectedAccount(e))},setAccountName:e.setAccountName.bind(e),setAccountLabel:(e,t)=>{this.preferencesController.setAccountLabel(e,t);const r=this.accountsController.getAccountByAddress(e);if(r===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(r.id,t)},getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTokenSymbol:this.getTokenSymbol.bind(this),addNft:s.addNft.bind(s),addNftVerifyOwnership:s.addNftVerifyOwnership.bind(s),removeAndIgnoreNft:s.removeAndIgnoreNft.bind(s),removeNft:s.removeNft.bind(s),checkAndUpdateAllNftsOwnershipStatus:s.checkAndUpdateAllNftsOwnershipStatus.bind(s),checkAndUpdateSingleNftOwnershipStatus:s.checkAndUpdateSingleNftOwnershipStatus.bind(s),isNftOwner:s.isNftOwner.bind(s),setAddressBook:t.set.bind(t),removeFromAddressBook:t.delete.bind(t),setLastActiveTime:n.setLastActiveTime.bind(n),setDefaultHomeActiveTabName:n.setDefaultHomeActiveTabName.bind(n),setConnectedStatusPopoverHasBeenShown:n.setConnectedStatusPopoverHasBeenShown.bind(n),setRecoveryPhraseReminderHasBeenShown:n.setRecoveryPhraseReminderHasBeenShown.bind(n),setRecoveryPhraseReminderLastShown:n.setRecoveryPhraseReminderLastShown.bind(n),setTermsOfUseLastAgreed:n.setTermsOfUseLastAgreed.bind(n),setSurveyLinkLastClickedOrClosed:n.setSurveyLinkLastClickedOrClosed.bind(n),setSnapsInstallPrivacyWarningShownStatus:n.setSnapsInstallPrivacyWarningShownStatus.bind(n),setOutdatedBrowserWarningLastShown:n.setOutdatedBrowserWarningLastShown.bind(n),setShowTestnetMessageInDropdown:n.setShowTestnetMessageInDropdown.bind(n),setShowBetaHeader:n.setShowBetaHeader.bind(n),setShowProductTour:n.setShowProductTour.bind(n),setShowAccountBanner:n.setShowAccountBanner.bind(n),setShowNetworkBanner:n.setShowNetworkBanner.bind(n),updateNftDropDownState:n.updateNftDropDownState.bind(n),setFirstTimeUsedNetwork:n.setFirstTimeUsedNetwork.bind(n),tryReverseResolveAddress:c.reverseResolveAddress.bind(c),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:this.exportAccount.bind(this),updateTransaction:b.updateTransaction.bind(b),approveTransactionsWithSameNonce:b.approveTransactionsWithSameNonce.bind(b),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),getNextNonce:this.getNextNonce.bind(this),addTransaction:(e,t)=>(0,lt.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!1}),this.updateSecurityAlertResponseByTxId.bind(this)),addTransactionAndWaitForPublish:(e,t)=>(0,lt.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!0}),this.updateSecurityAlertResponseByTxId.bind(this)),createTransactionEventFragment:ve.createTransactionEventFragmentWithTxId.bind(null,this.getTransactionMetricsRequest()),getTransactions:this.txController.getTransactions.bind(this.txController),updateEditableParams:this.txController.updateEditableParams.bind(this.txController),updateTransactionGasFees:b.updateTransactionGasFees.bind(b),updateTransactionSendFlowHistory:b.updateTransactionSendFlowHistory.bind(b),updatePreviousGasParams:b.updatePreviousGasParams.bind(b),abortTransactionSigning:b.abortTransactionSigning.bind(b),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:g.setSeedPhraseBackedUp.bind(g),completeOnboarding:g.completeOnboarding.bind(g),setFirstTimeFlowType:g.setFirstTimeFlowType.bind(g),setAlertEnabledness:r.setAlertEnabledness.bind(r),setUnconnectedAccountAlertShown:r.setUnconnectedAccountAlertShown.bind(r),setWeb3ShimUsageAlertDismissed:r.setWeb3ShimUsageAlertDismissed.bind(r),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,Ze.getPermissionBackgroundApiMethods)(C),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),updateSnap:(e,t)=>(this.controllerMessenger.call("SnapController:install",e,t),null),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.handleSnapRequest.bind(this),revokeDynamicSnapPermissions:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:revokeDynamicPermissions"),dismissNotifications:this.dismissNotifications.bind(this),markNotificationsAsRead:this.markNotificationsAsRead.bind(this),updateCaveat:this.updateCaveat.bind(this),updateNetworksList:this.updateNetworksList.bind(this),updateAccountsList:this.updateAccountsList.bind(this),updateHiddenAccountsList:this.updateHiddenAccountsList.bind(this),getPhishingResult:async e=>(await T.maybeUpdateState(),T.test(e)),getDesktopEnabled:this.desktopController.getDesktopEnabled.bind(this.desktopController),setDesktopEnabled:this.desktopController.setDesktopEnabled.bind(this.desktopController),generateDesktopOtp:this.desktopController.generateOtp.bind(this.desktopController),testDesktopConnection:this.desktopController.testDesktopConnection.bind(this.desktopController),disableDesktop:this.desktopController.disableDesktop.bind(this.desktopController),fetchAndSetQuotes:f.fetchAndSetQuotes.bind(f),setSelectedQuoteAggId:f.setSelectedQuoteAggId.bind(f),resetSwapsState:f.resetSwapsState.bind(f),setSwapsTokens:f.setSwapsTokens.bind(f),clearSwapsQuotes:f.clearSwapsQuotes.bind(f),setApproveTxId:f.setApproveTxId.bind(f),setTradeTxId:f.setTradeTxId.bind(f),setSwapsTxGasPrice:f.setSwapsTxGasPrice.bind(f),setSwapsTxGasLimit:f.setSwapsTxGasLimit.bind(f),setSwapsTxMaxFeePerGas:f.setSwapsTxMaxFeePerGas.bind(f),setSwapsTxMaxFeePriorityPerGas:f.setSwapsTxMaxFeePriorityPerGas.bind(f),safeRefetchQuotes:f.safeRefetchQuotes.bind(f),stopPollingForQuotes:f.stopPollingForQuotes.bind(f),setBackgroundSwapRouteState:f.setBackgroundSwapRouteState.bind(f),resetPostFetchState:f.resetPostFetchState.bind(f),setSwapsErrorKey:f.setSwapsErrorKey.bind(f),setInitialGasEstimate:f.setInitialGasEstimate.bind(f),setCustomApproveTxData:f.setCustomApproveTxData.bind(f),setSwapsLiveness:f.setSwapsLiveness.bind(f),setSwapsFeatureFlags:f.setSwapsFeatureFlags.bind(f),setSwapsUserFeeLevel:f.setSwapsUserFeeLevel.bind(f),setSwapsQuotesPollingLimitEnabled:f.setSwapsQuotesPollingLimitEnabled.bind(f),setSmartTransactionsOptInStatus:k.setOptInState.bind(k),fetchSmartTransactionFees:k.getFees.bind(k),clearSmartTransactionFees:k.clearFees.bind(k),submitSignedTransactions:k.submitSignedTransactions.bind(k),cancelSmartTransaction:k.cancelSmartTransaction.bind(k),fetchSmartTransactionsLiveness:k.fetchLiveness.bind(k),updateSmartTransaction:k.updateSmartTransaction.bind(k),setStatusRefreshInterval:k.setStatusRefreshInterval.bind(k),trackMetaMetricsEvent:u.trackEvent.bind(u),trackMetaMetricsPage:u.trackPage.bind(u),createEventFragment:u.createEventFragment.bind(u),updateEventFragment:u.updateEventFragment.bind(u),finalizeEventFragment:u.finalizeEventFragment.bind(u),trackInsightSnapView:this.trackInsightSnapView.bind(this),resolvePendingApproval:this.resolvePendingApproval,rejectPendingApproval:this.rejectPendingApproval,updateViewedNotifications:h.updateViewed.bind(h),getGasFeeEstimatesAndStartPolling:d.getGasFeeEstimatesAndStartPolling.bind(d),disconnectGasFeeEstimatePoller:d.disconnectPoller.bind(d),getGasFeeTimeEstimate:d.getTimeEstimate.bind(d),addPollingTokenToAppState:n.addPollingToken.bind(n),removePollingTokenFromAppState:n.removePollingToken.bind(n),backupUserData:y.backupUserData.bind(y),restoreUserData:y.restoreUserData.bind(y),detectNewTokens:l.detectNewTokens.bind(l),detectNfts:i.detectNfts.bind(i),addDetectedTokens:v.addDetectedTokens.bind(v),addImportedTokens:v.addTokens.bind(v),ignoreTokens:v.ignoreTokens.bind(v),getBalancesInSingleCall:w.getBalancesInSingleCall.bind(w),throwTestError:this.throwTestError.bind(this),updateProposedNames:this.nameController.updateProposedNames.bind(this.nameController),setName:this.nameController.setName.bind(this.nameController)}}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(t,e)}async getTokenStandardAndDetails(e,t,r){var n,o;const{tokenList:s}=this.tokenListController.state,{tokens:i}=this.tokensController.state,a={...he.STATIC_MAINNET_TOKEN_LIST[e.toLowerCase()]||{},...s[e.toLowerCase()]||{},...i.find((({address:t})=>(0,ue.isEqualCaseInsensitive)(t,e)))||{}},l=(0,ue.isEqualCaseInsensitive)(a.standard,Z.TokenStandard.ERC20)||!0===a.erc20,c=!(r||(0,ue.isEqualCaseInsensitive)(a.standard,Z.TokenStandard.ERC1155)||(0,ue.isEqualCaseInsensitive)(a.standard,Z.TokenStandard.ERC721)||a.erc721),d=a.decimals!==undefined&&a.symbol;let u;if(l||c&&d)try{const r=await(0,de.fetchTokenBalance)(e,t,this.provider);u={address:e,balance:r,standard:Z.TokenStandard.ERC20,decimals:a.decimals,symbol:a.symbol}}catch(e){v.default.warning(`Failed to get token balance. Error: ${e}`)}u===undefined&&(u=await this.assetsContractController.getTokenStandardAndDetails(e,t,r));if((0,ue.isEqualCaseInsensitive)(u.standard,Z.TokenStandard.ERC1155))try{const n=await(0,de.fetchERC1155Balance)(e,t,r,this.provider),o=null!=n&&n._hex?parseInt(n._hex,16).toString():null;u={...u,balance:o}}catch(e){v.default.warning("Failed to get token balance. Error:",e)}return{...u,decimals:null===(n=u)||void 0===n||null===(n=n.decimals)||void 0===n?void 0:n.toString(10),balance:null===(o=u)||void 0===o||null===(o=o.balance)||void 0===o?void 0:o.toString(10)}}async getTokenSymbol(e){try{const t=await this.assetsContractController.getTokenStandardAndDetails(e);return null==t?void 0:t.symbol}catch(e){return null}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{const t=await this.keyringController.createNewVaultAndKeychain(e),r=await this.keyringController.getAccounts();return this.preferencesController.setAddresses(r),this.selectFirstAccount(),t}finally{t()}}async createNewVaultAndRestore(e,r){const n=await this.createVaultMutex.acquire();try{const n=t.from(r);this.preferencesController.setAddresses([]),this.permissionController.clearState(),this.snapController.clearState(),this.notificationController.clear(),this.accountTracker.clearAccounts(),this.txController.clearUnapprovedTransactions();const i=await this.keyringController.createNewVaultAndRestore(e,this._convertMnemonicToWordlistIndices(n)),{chainId:a}=this.networkController.state.providerConfig,l=new S.default(this.provider),c=await this.keyringController.getAccounts();let d=c[c.length-1];for(let e=c.length;;e++){if("0x0"===await this.getBalance(d,l)){var o,s;await this.detectTokensController.detectNewTokens({selectedAddress:d});const t=null===(o=this.tokensController.state.allTokens)||void 0===o||null===(o=o[a])||void 0===o?void 0:o[d],r=null===(s=this.tokensController.state.allDetectedTokens)||void 0===s||null===(s=s[a])||void 0===s?void 0:s[d];if(0===((null==t?void 0:t.length)??0)&&0===((null==r?void 0:r.length)??0)){1!==e&&await this.removeAccount(d);break}}({addedAccountAddress:d}=await this.keyringController.addNewAccount(e))}return this.setLedgerTransportPreference(),this.selectFirstAccount(),i}finally{n()}}_convertMnemonicToWordlistIndices(e){const t=e.toString().split(" ").map((e=>W.wordlist.indexOf(e)));return new Uint8Array(new Uint16Array(t).buffer)}_convertEnglishWordlistIndicesToCodepoints(e){return t.from(Array.from(new Uint16Array(e.buffer)).map((e=>W.wordlist[e])).join(" "))}getBalance(e,t){return new Promise(((r,n)=>{const o=this.accountTracker.store.getState().accounts[e];o&&o.balance?r(o.balance):t.getBalance(e,((e,t)=>{e?(n(e),v.default.error(e)):r(t||"0x0")}))}))}async submitPassword(e){await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){v.default.error("Error while unlocking extension.",e)}await this.accountsController.updateAccounts(),this.setLedgerTransportPreference()}async _loginUser(e){try{await this.submitPassword(e),await this.accountTracker.updateAccountsAllActiveNetworks()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKey(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:r}=this.keyringController.state;if(JSON.parse(r).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}selectFirstAccount(){const{identities:e}=this.preferencesController.store.getState(),[t]=Object.keys(e);this.preferencesController.setSelectedAddress(t);const[r]=this.accountsController.listAccounts();this.accountsController.setSelectedAccount(r.id)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(ne.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){var r,n,o,s;const i=null===(r=this.opts.overrides)||void 0===r?void 0:r.keyrings;let a=null;switch(e){case re.HardwareDeviceNames.trezor:a=(null==i||null===(n=i.trezor)||void 0===n?void 0:n.type)||k.TrezorKeyring.type;break;case re.HardwareDeviceNames.ledger:a=(null==i||null===(o=i.ledger)||void 0===o?void 0:o.type)||b.LedgerKeyring.type;break;case re.HardwareDeviceNames.qr:a=y.MetaMaskKeyring.type;break;case re.HardwareDeviceNames.lattice:a=(null==i||null===(s=i.lattice)||void 0===s?void 0:s.type)||w.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[l]=await this.keyringController.getKeyringsByType(a);if(l||(l=await this.keyringController.addNewKeyring(a)),t&&l.setHdPath&&l.setHdPath(t),e===re.HardwareDeviceNames.lattice&&(l.appName="MetaMask"),e===re.HardwareDeviceNames.trezor){const e=l.getModel();this.appStateController.setTrezorModel(e)}return l.network=this.networkController.state.providerConfig.type,l}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(re.HardwareDeviceNames.ledger);return await e.attemptMakeApp()}async connectHardware(e,t,r){const n=await this.getKeyringForDevice(e,r);let o=[];switch(t){case-1:o=await n.getPreviousPage();break;case 1:o=await n.getNextPage();break;default:o=await n.getFirstPage()}const s=await this.keyringController.getAccounts(),i=[...new Set(s.concat(o.map((e=>e.address.toLowerCase()))))];return this.accountTracker.syncWithAddresses(i),o}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async forgetDevice(e){const t=await this.getKeyringForDevice(e);for(const e of t.accounts)await this.removeAccount(e);return t.forgetDevice(),!0}async getAccountType(e){switch(await this.keyringController.getAccountKeyringType(e)){case ne.KeyringType.trezor:case ne.KeyringType.lattice:case ne.KeyringType.qr:case ne.KeyringType.ledger:return"hardware";case ne.KeyringType.imported:return"imported";case ne.KeyringType.snap:return"snap";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case ne.KeyringType.trezor:return t.getModel();case ne.KeyringType.qr:return t.getName();case ne.KeyringType.ledger:return re.HardwareDeviceNames.ledger;case ne.KeyringType.lattice:return re.HardwareDeviceNames.lattice;default:return undefined}}getAccountLabel(e,t,r){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${r||""}`.trim()}async unlockHardwareWalletAccount(e,t,r,n){const o=await this.getKeyringForDevice(t,r);o.setAccountToUnlock(e);const s=await this.keyringController.getAccounts(),i=await this.keyringController.addNewAccountForKeyring(o),a=await this.keyringController.getAccounts();this.preferencesController.setAddresses(a),a.forEach((r=>{if(!s.includes(r)){const s=this.getAccountLabel(t===re.HardwareDeviceNames.qr?o.getName():t,e,n);this.preferencesController.setAccountLabel(r,s),this.preferencesController.setSelectedAddress(r);const i=this.accountsController.getAccountByAddress(r);this.accountsController.setAccountName(i.id,s)}}));const l=this.accountsController.listAccounts(),{identities:c}=this.preferencesController.store.getState();return{...i,identities:c,accounts:l}}async addNewAccount(e){const t=await this.keyringController.getAccounts(),{addedAccountAddress:r}=await this.keyringController.addNewAccount(e);return t.includes(r)||this.preferencesController.setSelectedAddress(r),r}async getSeedPhrase(e){return this._convertEnglishWordlistIndicesToCodepoints(await this.keyringController.exportSeedPhrase(e))}async resetAccount(){const e=this.accountsController.getSelectedAccount().address;return this.txController.wipeTransactions(!0,e),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,oe.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===m.errorCodes.provider.unauthorized)return[];throw e}}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(oe.CaveatTypes.restrictReturnedAccounts,(t=>Ze.CaveatMutatorFactories[oe.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const r=t?await t.getAccounts():{};var n;0===(null==r?void 0:r.length)&&(null===(n=t.destroy)||void 0===n||n.call(t));return e}async importAccountWithStrategy(e,t){const{importedAccountAddress:r}=await this.keyringController.importAccountWithStrategy(e,t);this.preferencesController.setSelectedAddress(r)}getAddTransactionRequest({transactionParams:e,transactionOptions:t,dappRequest:r}){var n;return{dappRequest:r,networkClientId:this.networkController.state.selectedNetworkClientId,selectedAccount:this.accountsController.getSelectedAccount(),transactionController:this.txController,transactionOptions:t,transactionParams:e,userOperationController:this.userOperationController,ppomController:this.ppomController,securityAlertsEnabled:null===(n=this.preferencesController.store.getState())||void 0===n?void 0:n.securityAlertsEnabled,chainId:this.networkController.state.providerConfig.chainId}}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,r){await this.txController.stopTransaction(e,t,r);return this.getState()}async createSpeedUpTransaction(e,t,r){await this.txController.speedUpTransaction(e,t,r);return this.getState()}async estimateGas(e){return new Promise(((t,r)=>new T.default(this.provider).estimateGas(e,((e,n)=>e?r(e):t(n.toString(16))))))}async updateSecurityAlertResponseByTxId(e,t){let r=!1;for(;!r;)r=Z.SIGNING_METHODS.includes(e.method)?Object.values(this.signatureController.messages).find((t=>{var r;return(null===(r=t.securityAlertResponse)||void 0===r?void 0:r.securityAlertId)===e.securityAlertResponse.securityAlertId})):this.txController.state.transactions.find((t=>{var r;return(null===(r=t.securityAlertResponse)||void 0===r?void 0:r.securityAlertId)===e.securityAlertResponse.securityAlertId})),r||await new Promise((e=>setTimeout(e,100)));Z.SIGNING_METHODS.includes(e.method)?this.appStateController.addSignatureSecurityAlertResponse(t):this.txController.updateSecurityAlertResponse(r.id,t)}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setUseRequestQueue(e){this.preferencesController.setUseRequestQueue(e),this.selectedNetworkController.update((t=>{t.perDomainNetwork=e}))}setupUntrustedCommunication({connectionStream:e,sender:t,subjectType:r}){const{usePhishDetect:n}=this.preferencesController.store.getState();let o;if(o=r||(t.id&&t.id!==this.extension.runtime.id?F.SubjectType.Extension:F.SubjectType.Website),t.url){const{hostname:r}=new URL(t.url);this.phishingController.maybeUpdateState();const o=this.phishingController.test(r);if(n&&null!=o&&o.result)return this.sendPhishingWarning(e,r),void this.metaMetricsController.trackEvent({event:le.MetaMetricsEventName.PhishingPageDisplayed,category:le.MetaMetricsEventCategory.Phishing,properties:{url:r}})}const s=(0,xe.setupMultiplex)(e);this.setupProviderConnection(s.createStream("metamask-provider"),t,o),t.url&&this.setupPublicConfig(s.createStream("publicConfig"))}setupTrustedCommunication(e,t){const r=(0,xe.setupMultiplex)(e);this.setupControllerConnection(r.createStream("controller")),this.setupProviderConnection(r.createStream("provider"),t,F.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.store.getState();if(!t)return;const r=(0,xe.setupMultiplex)(e).createStream("metamask-phishing-safelist");r.on("data",(0,We.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},r))}sendPhishingWarning(e,t){(0,xe.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=this.getApi();this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,We.default)(t,e,this.store,this.localStoreApiWrapper));const r=t=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"sendUpdate",params:[t]})};this.on("update",r);const n=()=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?n():this.once("startUISync",n),e.on("end",(()=>{this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),this.removeListener("update",r)}))}setupProviderConnection(e,t,r){let n,s;n=r===F.SubjectType.Internal?ae.ORIGIN_METAMASK:r===F.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:n,extensionId:t.id,subjectType:F.SubjectType.Extension}),t.tab&&t.tab.id&&(s=t.tab.id);const i=this.setupProviderEngine({origin:n,sender:t,subjectType:r,tabId:s}),a=(0,c.createEngineStream)({engine:i}),l=this.addConnection(n,{engine:i});(0,o.default)(e,a,e,(e=>{i._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),l&&this.removeConnection(n,l),e&&v.default.error(e)}))}setupSnapProvider(e,t){this.setupUntrustedCommunication({connectionStream:t,sender:{snapId:e},subjectType:F.SubjectType.Snap})}setupProviderEngine({origin:e,subjectType:t,sender:r,tabId:n}){const o=new l.JsonRpcEngine,{blockTracker:s,provider:i}=this;o.push((0,Re.default)({origin:e})),o.push((0,D.createSelectedNetworkMiddleware)(this.controllerMessenger));const{selectedNetworkClientId:a}=this.networkController.state;this.selectedNetworkController.getNetworkClientIdForDomain(e)===undefined&&this.selectedNetworkController.setNetworkClientIdForDomain(e,a);let c=i;this.preferencesController.getUseRequestQueue()&&(c=this.selectedNetworkController.getProviderAndBlockTracker(e).provider);const u=(0,Q.createQueuedRequestMiddleware)({messenger:this.controllerMessenger,useRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController)});o.push(u);const p=(0,g.default)({provider:i,blockTracker:s}),h=(0,C.default)({provider:i,blockTracker:s});return h.events.on("notification",(e=>o.emit("notification",e))),Ce.isManifestV3&&o.push((0,Ee.default)()),n&&o.push((0,Ie.default)({tabId:n})),o.push((0,Pe.default)({origin:e})),o.push(this.permissionLogController.createMiddleware()),o.push((0,ye.createPPOMMiddleware)(this.ppomController,this.preferencesController,this.networkController,this.appStateController,this.updateSecurityAlertResponseByTxId.bind(this))),o.push((0,et.default)({trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getMetricsState:this.metaMetricsController.store.getState.bind(this.metaMetricsController.store),securityProviderRequest:this.securityProviderRequest.bind(this),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),appStateController:this.appStateController})),t===F.SubjectType.Website&&o.push((0,Fe.default)({location:r.url,registerOnboarding:this.onboardingController.registerOnboarding})),o.push((0,Ne.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),metamaskState:this.getState(),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),startApprovalFlow:this.approvalController.startFlow.bind(this.approvalController),endApprovalFlow:this.approvalController.endFlow.bind(this.approvalController),setApprovalFlowLoadingText:this.approvalController.setFlowLoadingText.bind(this.approvalController),showApprovalSuccess:this.approvalController.success.bind(this.approvalController),showApprovalError:this.approvalController.error.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{}}),requestPermissionsForOrigin:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e}),revokePermissionsForOrigin:t=>{try{this.permissionController.revokePermissions({[e]:t})}catch(e){console.log(e)}},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getCurrentRpcUrl:()=>this.networkController.state.providerConfig.rpcUrl,getNetworkConfigurations:()=>this.networkController.state.networkConfigurations,upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),setActiveNetwork:e=>{this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setActiveNetwork(e)},findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController),findNetworkConfigurationBy:this.findNetworkConfigurationBy.bind(this),getNetworkClientIdForDomain:this.selectedNetworkController.getNetworkClientIdForDomain.bind(this.selectedNetworkController),setNetworkClientIdForDomain:this.selectedNetworkController.setNetworkClientIdForDomain.bind(this.selectedNetworkController),getUseRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController),getProviderConfig:()=>this.networkController.state.providerConfig,setProviderType:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setProviderType(e)),getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),o.push((0,q.createSnapsMethodMiddleware)(t===F.SubjectType.Snap,{getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>await this.permissionController.requestPermissions({origin:e},t),getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getSnapFile:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getFile",e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e),getIsLocked:()=>!this.appStateController.isUnlocked(),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),getAllSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getAll"),handleSnapRpcRequest:t=>this.handleSnapRequest({...t,origin:e}),getAllowedKeyringMethods:(0,ke.keyringSnapPermissionsBuilder)(this.subjectMetadataController,e)})),o.push(p),o.push(h.middleware),t!==F.SubjectType.Internal&&o.push(this.permissionController.createPermissionMiddleware({origin:e})),o.push(this.metamaskMiddleware),o.push((0,d.providerAsMiddleware)(c)),o}setupPublicConfig(e){const t=(0,a.storeAsStream)(this.publicConfigStore);(0,o.default)(t,e,(e=>{t.destroy(),e&&v.default.error(e)}))}addConnection(e,{engine:t}){if(e===ae.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const r=(0,M.default)();return this.connections[e][r]={engine:t},r}removeConnection(e,t){const r=this.connections[e];r&&(delete r[t],0===Object.keys(r).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const r=this.connections[e];r&&Object.values(r).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{r.engine&&r.engine.emit("notification",await t(e))}))}))}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,r=t.reduce(((e,{accounts:t})=>e.concat(t)),[]);r.length&&(this.preferencesController.syncAddresses(r),this.accountTracker.syncWithAddresses(r))}_onUnlock(){this.notifyAllConnections((async e=>({method:Ze.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:Ze.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this._notifyChainChange()}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.state.isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async getPendingNonce(e){const{nonceDetails:t,releaseLock:r}=await this.txController.getNonceLock(e),n=t.params.highestSuggested;return r(),n}async getNextNonce(e){const t=await this.txController.getNonceLock(e);return t.releaseLock(),t.nextNonce}throwTestError(e){setTimeout((()=>{const t=new Error(e);throw t.name="TestError",t}))}_addTransactionControllerListeners(){const e=this.getTransactionMetricsRequest();this.txController.hub.on("post-transaction-balance-updated",ve.handlePostTransactionBalanceUpdate.bind(null,e)),this.txController.hub.on("unapprovedTransaction",(t=>(0,ve.handleTransactionAdded)(e,{transactionMeta:t}))),this.txController.hub.on("transaction-approved",ve.handleTransactionApproved.bind(null,e)),this.txController.hub.on("transaction-dropped",ve.handleTransactionDropped.bind(null,e)),this.txController.hub.on("transaction-confirmed",ve.handleTransactionConfirmed.bind(null,e)),this.txController.hub.on("transaction-failed",ve.handleTransactionFailed.bind(null,e)),this.txController.hub.on("transaction-new-swap",(({transactionMeta:e})=>{this.swapsController.setTradeTxId(e.id)})),this.txController.hub.on("transaction-new-swap-approval",(({transactionMeta:e})=>{this.swapsController.setApproveTxId(e.id)})),this.txController.hub.on("transaction-rejected",ve.handleTransactionRejected.bind(null,e)),this.txController.hub.on("transaction-submitted",ve.handleTransactionSubmitted.bind(null,e)),this.txController.hub.on("transaction-status-update",(({transactionMeta:e})=>{this._onFinishedTransaction(e)}))}getTransactionMetricsRequest(){return{...{createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getSelectedAddress:()=>this.preferencesController.store.getState().selectedAddress,getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTransaction:e=>this.txController.state.transactions.find((t=>t.id===e))},snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),provider:this.provider}}findNetworkConfigurationBy(e){const{networkConfigurations:t}=this.networkController.state;return Object.values(t).find((t=>Object.keys(e).some((r=>t[r]===e[r]))))||null}async setLedgerTransportPreference(){const e=window.navigator.hid?re.LedgerTransportTypes.webhid:re.LedgerTransportTypes.u2f,t=await this.getKeyringForDevice(re.HardwareDeviceNames.ledger);return null!=t&&t.updateTransportMethod?t.updateTransportMethod(e).catch((e=>{throw e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t=this.platform.getVersion();e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e,this.detectTokensController.isOpen=e}onClientClosed(){try{this.gasFeeController.stopPolling(),this.appStateController.clearPollingTokens()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=ae.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.disconnectPoller(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){const e=this.platform.getExtensionURL();await this.platform.switchToAnotherURL(undefined,e)}setLocked(){return this.keyringController.setLocked()}async securityProviderRequest(e,t){const{currentLocale:r,transactionSecurityCheckEnabled:n}=this.preferencesController.store.getState();if(n){const n=Number((0,me.hexToDecimal)(this.networkController.state.providerConfig.chainId));try{return await(0,tt.securityProviderCheck)(e,t,n,r)}catch(e){throw v.default.error(e.message),e}}return null}async _onAccountChange(e){const t=(0,Ze.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[r,n]of t.entries())n.includes(e)&&this._notifyAccountsChange(r,n);await this.txController.updateIncomingTransactions()}async _notifyAccountsChange(e,t){this.isUnlocked()&&this.notifyConnections(e,{method:Ze.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)}_notifyChainChange(){this.preferencesController.getUseRequestQueue()?this.notifyAllConnections((e=>({method:Ze.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState(e)}))):this.notifyAllConnections({method:Ze.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState()})}async _onFinishedTransaction(e){[J.TransactionStatus.confirmed,J.TransactionStatus.failed].includes(e.status)&&(await this._createTransactionNotifcation(e),this._updateNFTOwnership(e),this._trackTransactionFailure(e))}async _createTransactionNotifcation(e){const{chainId:t}=e;let r={};if(t){const{networkConfigurations:e}=this.networkController.state,n=Object.values(e).find((e=>e.chainId===t));r=(null==n?void 0:n.rpcPrefs)??{}}try{await this.platform.showTransactionNotification(e,r)}catch(e){v.default.error("Failed to create transaction notification",e)}}_updateNFTOwnership(e){var t;const{type:r,txParams:n,chainId:o}=e;if(r!==J.TransactionType.tokenMethodTransferFrom||n===undefined)return;const{data:s,to:i,from:a}=n,l=(0,pe.parseStandardTokenTransactionData)(s),c=(0,de.getTokenIdParam)(l)??(0,ge.getTokenValueParam)(l),{allNfts:d}=this.nftController.state,u=null==d||null===(t=d[a])||void 0===t||null===(t=t[o])||void 0===t?void 0:t.find((({address:e,tokenId:t})=>(0,ue.isEqualCaseInsensitive)(e,i)&&t===c));u&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(u,!1,{userAddress:a})}_trackTransactionFailure(e){var t;const{txReceipt:r}=e,n=this.getState();r&&"0x0"===r.status&&this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:le.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(t=e.simulationFails)||void 0===t?void 0:t.reason,numberOfTokens:n.tokens.length,numberOfAccounts:Object.keys(n.accounts).length}},{matomoEvent:!0})}_onUserOperationAdded(e){const t=this.txController.state.transactions.find((t=>t.id===e.id));t&&(t.type===J.TransactionType.swap?this.txController.hub.emit("transaction-new-swap",{transactionMeta:t}):t.type===J.TransactionType.swapApproval&&this.txController.hub.emit("transaction-new-swap-approval",{transactionMeta:t}))}_onUserOperationTransactionUpdated(e){e.txParams.from=this.preferencesController.getSelectedAddress();this.txController.state.transactions.some((t=>t.id===e.id))||this.txController.state.transactions.push(e),this.txController.updateTransaction(e,"Generated from user operation"),this.txController.hub.emit("transaction-status-update",{transactionMeta:e})}}r.default=ht}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[92,{lodash:3444},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:2,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[93,{lodash:3444},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:3,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[94,{lodash:3444},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:4,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[95,{lodash:3444},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:5,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,r={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete r.vault,delete r.walletNicknames,delete r.config.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[96,{lodash:3444},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:6,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,r={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete r.KeyringController.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[97,{lodash:3444},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:7,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[98,{lodash:3444},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:8,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[99,{lodash:3444},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:9,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,n.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/009.js"}],[5,{"../../shared/constants/app":4067,"../../shared/constants/metametrics":4077,"../../shared/modules/browser-runtime.utils":4102,"../../shared/modules/mv3.utils":4112,"../../shared/modules/object.utils":4114,"./first-time-state":29,"./lib/createStreamSink":42,"./lib/ens-ipfs/setup":48,"./lib/get-first-preferred-lang-code":50,"./lib/getObjStructure":51,"./lib/local-store":54,"./lib/migrator":57,"./lib/network-store":58,"./lib/notification-manager":59,"./lib/setup-initial-state-hooks":81,"./lib/setupSentry":82,"./lib/util":90,"./metamask-controller":91,"./migrations":206,"./platforms/extension":207,"@metamask/controller-utils":1077,"@metamask/desktop/dist/constants":1084,"@metamask/desktop/dist/desktop-manager":1089,"@metamask/obs-store":1424,"@metamask/utils":1798,"debounce-stream":2680,"end-of-stream":2726,"eth-rpc-errors":2790,events:2875,"extension-port-stream":2878,loglevel:3454,pump:3611,"webextension-polyfill":4049},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.loadStateFromPersistence=ue,r.setupController=he,r.statePersistenceEvents=void 0,e("./lib/setup-initial-state-hooks");var n=D(e("events")),o=D(e("end-of-stream")),s=D(e("pump")),i=D(e("debounce-stream")),a=D(e("loglevel")),l=D(e("webextension-polyfill")),c=e("@metamask/obs-store"),d=e("@metamask/utils"),u=e("@metamask/controller-utils"),p=D(e("extension-port-stream")),h=e("eth-rpc-errors"),g=e("../../shared/constants/app"),C=e("../../shared/constants/metametrics"),m=e("../../shared/modules/browser-runtime.utils"),f=e("../../shared/modules/mv3.utils"),v=e("../../shared/modules/object.utils"),k=D(e("./migrations")),b=D(e("./lib/migrator")),w=D(e("./platforms/extension")),y=D(e("./lib/local-store")),S=(D(e("./lib/network-store")),e("./lib/setupSentry")),T=D(e("./lib/createStreamSink")),M=x(e("./lib/notification-manager")),A=x(e("./metamask-controller")),E=D(e("./first-time-state")),P=D(e("./lib/get-first-preferred-lang-code")),N=D(e("./lib/getObjStructure")),R=D(e("./lib/ens-ipfs/setup")),I=e("./lib/util"),_=e("@metamask/desktop/dist/constants"),O=D(e("@metamask/desktop/dist/desktop-manager"));function F(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(F=function(e){return e?r:t})(e)}function x(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=F(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var i=o?Object.getOwnPropertyDescriptor(e,s):null;i&&(i.get||i.set)?Object.defineProperty(n,s,i):n[s]=e[s]}return n.default=e,r&&r.set(e,n),n}function D(e){return e&&e.__esModule?e:{default:e}}const L=new y.default;global.stateHooks.getMostRecentPersistedState=()=>L.mostRecentRetrievedState;const{sentry:U}=global,B={...E.default},j={[g.ENVIRONMENT_TYPE_POPUP]:!0,[g.ENVIRONMENT_TYPE_NOTIFICATION]:!0,[g.ENVIRONMENT_TYPE_FULLSCREEN]:!0},q=["trezor-connect"];a.default.setLevel("info",!1);const K=new w.default,G=new M.default;let $=!1,V=!1,H=!1;const W={},z={};let Q,Y;const J={};const X=new URL("https://metamask.github.io/phishing-warning/v3.0.3/"),Z=1e3,ee={EXTENSION:"EXTENSION",DESKTOP:"DESKTOP_APP"},te=r.statePersistenceEvents=new n.default,{promise:re,resolve:ne,reject:oe}=(0,I.deferredPromise)(),se=async()=>{const e=await l.default.tabs.query({url:"<all_urls>",windowType:"normal"}).then((e=>((0,m.checkForLastErrorAndLog)(),e))).catch((()=>{(0,m.checkForLastErrorAndLog)()}));for(const t of e)l.default.tabs.sendMessage(t.id,{name:g.EXTENSION_MESSAGES.READY}).then((()=>{(0,m.checkForLastErrorAndLog)()})).catch((()=>{(0,m.checkForLastErrorAndLog)()}))};let ie,ae;function le(){const e=(new Date).toISOString();l.default.storage.session.set({timestamp:e})}async function ce(){try{const e=await ue(),t=e.data,r=await(0,P.default)();let n;if(await O.default.init(K.getVersion()),f.isManifestV3){const e=2e3;le(),setInterval(le,e);const t=await l.default.storage.session.get(["isFirstMetaMaskControllerSetup"]);n=(null==t?void 0:t.isFirstMetaMaskControllerSetup)===undefined,await l.default.storage.session.set({isFirstMetaMaskControllerSetup:n})}he(t,r,{},n,e.meta),f.isManifestV3||await async function(){let e;try{const t=new URL("https://metamask.github.io/phishing-warning/v3.0.3/");let r,n;t.hash="#extensionStartup",e=window.document.createElement("iframe"),e.setAttribute("src",t.href),e.setAttribute("sandbox","allow-scripts allow-same-origin");const o=new Promise(((e,t)=>{r=e,n=t}));e.addEventListener("load",r),window.document.body.appendChild(e),setTimeout((()=>n(new de)),Z),await o}catch(e){e instanceof de?console.warn("Phishing warning page timeout; page not guaranteed to work offline."):console.error("Failed to initialize phishing warning page",e)}finally{e&&e.remove()}}(),await se(),a.default.info("MetaMask initialization complete."),ne()}catch(e){oe(e)}}l.default.runtime.onConnect.addListener((async(...e)=>{await re,ie(...e)})),l.default.runtime.onConnectExternal.addListener((async(...e)=>{await re,ae(...e)}));class de extends Error{constructor(){super("Timeout failed")}}async function ue(){const e=new b.default({migrations:k.default});if(e.on("error",console.warn),Y=await L.get()||e.generateInitialState(B),Y&&!Y.data&&(Y=e.generateInitialState(B),U.captureMessage("MetaMask - Empty vault found - unable to recover")),e.on("error",(e=>{const t=(0,N.default)(Y);U.captureException(e,{extra:{vaultStructure:t}})})),Y=await e.migrateData(Y),!Y)throw new Error("MetaMask - migrator returned undefined");if(!(0,d.isObject)(Y.meta))throw new Error(`MetaMask - migrator metadata has invalid type '${typeof Y.meta}'`);if("number"!=typeof Y.meta.version)throw new Error(`MetaMask - migrator metadata version has invalid type '${typeof Y.meta.version}'`);if(!(0,d.isObject)(Y.data))throw new Error(`MetaMask - migrator data has invalid type '${typeof Y.data}'`);return L.setMetadata(Y.meta),L.set(Y.data),Y}function pe(e,t,r){if(!(0,d.hasProperty)(t.permissions,"eth_accounts"))return;const n=Object.keys(r.store.getState().identities).length,o=t.permissions.eth_accounts.caveats;if(o){const t=o[0].value.length;Q.metaMetricsController.trackEvent({event:C.MetaMetricsEventName.DappViewed,category:C.MetaMetricsEventCategory.InpageProvider,referrer:{url:e},properties:{is_first_visit:!1,number_of_accounts:n,number_of_accounts_connected:t}})}}function he(e,t,r,n,d){var m,k;Q=new A.default({infuraProjectId:"0d73cc5bbe184146957a9d00764db99f",showUserConfirmation:ge,initState:e,initLangCode:t,platform:K,notificationManager:G,browser:l.default,getRequestAccountTabIds:()=>z,getOpenMetamaskTabsIds:()=>W,localStore:L,overrides:r,isFirstMetaMaskControllerSetup:n,currentMigrationVersion:d.version,featureFlags:{}}),(0,R.default)({getCurrentChainId:()=>Q.networkController.state.providerConfig.chainId,getIpfsGateway:Q.preferencesController.getIpfsGateway.bind(Q.preferencesController),getUseAddressBarEnsResolution:()=>Q.preferencesController.store.getState().useAddressBarEnsResolution,provider:Q.provider}),(0,s.default)((0,c.storeAsStream)(Q.store),(0,i.default)(1e3),(0,T.default)((async e=>{await L.set(e),te.emit("state-persisted",e)})),(e=>{a.default.error("MetaMask - Persistence pipeline failed",e)})),k=Q,global.stateHooks.getSentryAppState=function(){const e=k.memStore.getState();return(0,v.maskObject)(e,S.SENTRY_BACKGROUND_STATE)};const b=()=>$||Boolean(Object.keys(W).length)||V,w=(e,t)=>{if(!1===e)Q.onClientClosed();else{if(t===g.ENVIRONMENT_TYPE_FULLSCREEN&&Boolean(Object.keys(W).length))return;Q.onEnvironmentTypeClosed(t)}};function y(){let e="";const t=E();t&&(e=String(t)),f.isManifestV3?(l.default.action.setBadgeText({text:e}),l.default.action.setBadgeBackgroundColor({color:"#037DD6"})):(l.default.browserAction.setBadgeText({text:e}),l.default.browserAction.setBadgeBackgroundColor({color:"#037DD6"}))}function E(){let e=Q.appStateController.waitingForUnlock.length;return Q.preferencesController.getUseRequestQueue()?e+=Q.queuedRequestController.length():e+=Q.approvalController.getTotalApprovalCount(),e}ie=async e=>{var t,n;if(O.default.isDesktopEnabled()&&ee.DESKTOP!==(null==r||null===(t=r.getOrigin)||void 0===t?void 0:t.call(r)))return void O.default.createStream(e,_.CONNECTION_TYPE_INTERNAL).then((()=>{f.isManifestV3&&e.postMessage({name:"CONNECTION_READY"})}));const s=e.name;if(q.includes(e.name))return;let i=!1;const a=(0,I.getPlatform)(),c=null!==(n=e.sender)&&void 0!==n&&n.url?new URL(e.sender.url):null;if(i=a===g.PLATFORM_FIREFOX?j[s]:(null==c?void 0:c.origin)===`chrome-extension://${l.default.runtime.id}`,i){var d;const t=(null==r||null===(d=r.getPortStream)||void 0===d?void 0:d.call(r,e))||new p.default(e);if(Q.isClientOpen=!0,Q.setupTrustedCommunication(t,e.sender),s===g.ENVIRONMENT_TYPE_POPUP&&($=!0,(0,o.default)(t,(()=>{$=!1;const e=b();Q.isClientOpen=e,w(e,g.ENVIRONMENT_TYPE_POPUP)}))),s===g.ENVIRONMENT_TYPE_NOTIFICATION&&(V=!0,(0,o.default)(t,(()=>{V=!1;const e=b();Q.isClientOpen=e,w(e,g.ENVIRONMENT_TYPE_NOTIFICATION)}))),s===g.ENVIRONMENT_TYPE_FULLSCREEN){const r=e.sender.tab.id;W[r]=!0,(0,o.default)(t,(()=>{delete W[r];const e=b();Q.isClientOpen=e,w(e,g.ENVIRONMENT_TYPE_FULLSCREEN)}))}}else if(c&&c.origin===X.origin&&c.pathname===X.pathname){var u;const t=(null==r||null===(u=r.getPortStream)||void 0===u?void 0:u.call(r,e))||new p.default(e);Q.setupPhishingCommunication({connectionStream:t})}else{if(e.sender&&e.sender.tab&&e.sender.url){const t=e.sender.tab.id,r=new URL(e.sender.url),{origin:n}=r;Object.keys(J).includes(t)||(J[t]=n);const o=Q.permissionController.state.subjects[n],s=o!==undefined,i="New Tab"!==e.sender.tab.title;s&&i&&pe(n,o,Q.preferencesController),e.onMessage.addListener((e=>{e.data&&e.data.method===g.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS&&(z[n]=t)}))}ae(e)}},ae=e=>{var t,n;if(O.default.isDesktopEnabled()&&ee.DESKTOP!==(null==r||null===(t=r.getOrigin)||void 0===t?void 0:t.call(r)))return void O.default.createStream(e,_.CONNECTION_TYPE_EXTERNAL);const o=(null==r||null===(n=r.getPortStream)||void 0===n?void 0:n.call(r,e))||new p.default(e);Q.setupUntrustedCommunication({connectionStream:o,sender:e.sender})},null!=r&&r.registerConnectListeners&&r.registerConnectListeners(ie,ae),y(),Q.decryptMessageController.hub.on(A.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,y),Q.encryptionPublicKeyController.hub.on(A.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,y),Q.signatureController.hub.on(A.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,y),Q.appStateController.on(A.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,y),Q.controllerMessenger.subscribe(A.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE,y),Q.txController.initApprovals(),Q.controllerMessenger.subscribe("QueuedRequestController:countChanged",(e=>{y(),e>0&&ge()})),G.on(M.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED,(({automaticallyClosed:e})=>{Q.preferencesController.getUseRequestQueue()||(e?E()>0&&ge():(Q.signatureController.rejectUnapproved(C.REJECT_NOTIFICATION_CLOSE_SIG),Q.decryptMessageController.rejectUnapproved(C.REJECT_NOTIFICATION_CLOSE),Q.encryptionPublicKeyController.rejectUnapproved(C.REJECT_NOTIFICATION_CLOSE),Object.values(Q.approvalController.state.pendingApprovals).forEach((({id:e,type:t})=>{switch(t){case u.ApprovalType.SnapDialogAlert:case u.ApprovalType.SnapDialogPrompt:Q.approvalController.accept(e,null);break;case u.ApprovalType.SnapDialogConfirmation:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountCreation:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountRemoval:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showSnapAccountRedirect:Q.approvalController.accept(e,!1);break;default:Q.approvalController.reject(e,h.ethErrors.provider.userRejectedRequest())}}))),y())})),ee.DESKTOP!==(null==r||null===(m=r.getOrigin)||void 0===m?void 0:m.call(r))&&Q.store.subscribe((e=>{O.default.setState(e)})),Object.keys(Q.snapController.state.snaps).length>0&&Q.snapController.updateBlockedSnaps()}async function ge(){const e=await K.getActiveTabs(),t=Boolean(e.find((e=>W[e.id]))),r=e.length>0&&e[0].extData&&e[0].extData.indexOf("vivaldi_tab")>-1;if(!H&&(r||!$)&&!t){H=!0;try{const e=Q.appStateController.getCurrentPopupId();await G.showPopup((e=>Q.appStateController.setCurrentPopupId(e)),e)}finally{H=!1}}}const Ce=()=>{if(Q)return Q.metaMetricsController.updateTraits({[C.MetaMetricsUserTrait.InstallDateExt]:(new Date).toISOString().split("T")[0]}),void Q.metaMetricsController.addEventBeforeMetricsOptIn({category:C.MetaMetricsEventCategory.App,event:C.MetaMetricsEventName.AppInstalled,properties:{}});setTimeout((()=>{Ce()}),1e3)};async function me(){Boolean(await L.get())||(Ce(),K.openExtensionInBrowser()),l.default.tabs.onActivated.addListener((e=>{if(Q){const{tabId:t}=e,r=J[t];if(r){const e=Q.permissionController.state.subjects[r];e!==undefined&&pe(r,e,Q.preferencesController)}}}))}(async function(){await me(),ce().catch(a.default.error)})()}}},{package:"$root$",file:"app/scripts/background.js"}]],[5],{});